version: 2.1

commands:
  macos:
    description: "Commands run on MacOS"
    parameters:
      py_version:
        type: string
    steps:
      - restore_cache:
          keys:
            - -v0-source-{{ .Branch }}-{{ .Revision }}
            - -v0-source-{{ .Branch }}-
            - -v0-source-
      - checkout
      - save_cache:
          key: -v0-source--{{ .Branch }}-{{ .Revision }}
          paths:
            - project
            - ".git"
      - restore_cache:
          key: -v0-macos-sys-{{ .Branch }}-<< parameters.py_version >>
      - run:
          name: "Set up Conda"
          command: |
            if [[ -f ~/miniconda3/LICENSE.txt ]] ; then
              echo "miniconda installed already."
            else
              curl -o Miniconda3-latest-MacOSX-x86_64.sh https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-x86_64.sh
              bash ./Miniconda3-latest-MacOSX-x86_64.sh -b
            fi
            ~/miniconda3/bin/conda init bash
      - run:
          name: "Brew"
          command: |
            brew update
            brew upgrade git
            brew install fish
      - run:
          name: "Hydra Conda"
          command: |
            conda create -n hydra python=<< parameters.py_version >> -yq
            conda run -n hydra pip install nox
      - save_cache:
          key: -v0-macos-sys-{{ .Branch }}-<< parameters.py_version >>
          paths:
            - ~/miniconda3
            - /usr/local/Homebrew


  linux:
    description: "Commands run on Linux"
    parameters:
      py_version:
        type: string
    steps:
      - checkout
      - run:
          name: "Preparing environment"
          command: |
            sudo apt-get update
            sudo apt-get install -y expect fish openjdk-11-jre
            sudo pip install nox


  win:
    description: "Commands run on Windows"
    parameters:
      py_version:
        type: string
    steps:
      - checkout
      - restore_cache:
          key: -v0-win-sys-{{ .Branch }}-<< parameters.py_version >>
      - run:
          name: Preparing system
          command: |
            choco install -y --no-progress miniconda3
            C:\tools\miniconda3\Scripts\conda.exe init powershell
            choco install -y --no-progress openssl javaruntime
      - run:
          name: Preparing conda environment
          command: |
            conda create -n hydra python=<< parameters.py_version >> pywin32 -qy
            conda activate hydra
            pip install nox dataclasses
      - save_cache:
          key: -v0-win-sys-{{ .Branch }}-<< parameters.py_version >>
          paths:
            - C:\tools\miniconda3

parameters:
  plugin_test:
    type: boolean
    default: False
  plugin:
    type: string
    default: ""


jobs:
  test_macos:
    parameters:
      py_version:
        type: string
    macos:
      xcode: "10.0.0"
    steps:
      - macos:
          py_version: << parameters.py_version >>
      - run:
          name: "Testing Hydra"
          no_output_timeout: 10m
          command: |
            export NOX_PYTHON_VERSIONS=<< parameters.py_version >>
            conda activate hydra
            pip install nox dataclasses
            nox -s lint test_core test_jupyter_notebooks -ts


  test_linux:
    parameters:
      py_version:
        type: string
    docker:
      - image: circleci/python:<< parameters.py_version >>
    steps:
      - linux:
          py_version: << parameters.py_version >>
      - run:
          name: "Testing Hydra"
          command: |
            export NOX_PYTHON_VERSIONS=<< parameters.py_version >>
            pip install nox dataclasses
            nox -s lint test_core test_jupyter_notebooks -ts


  test_win:
    parameters:
      py_version:
        type: string
    executor: win/default
    steps:
      - win:
          py_version: << parameters.py_version >>
      - run:
          name: Testing Hydra
          no_output_timeout: 20m
          command: |
            $env:NOX_PYTHON_VERSIONS=<< parameters.py_version >>
            $env:PYTHONIOENCODING="utf_8"
            conda activate hydra
            nox -s lint test_core test_jupyter_notebooks -ts
            exit $LASTEXITCODE

  trigger_plugin_piplines:
    docker:
      - image: circleci/python:3.8
    steps:
      - checkout
      - run:
          name: "Kick off Plugin tests."
          command: |
            python tools/circleci_pipeline.py $CIRCLE_BRANCH $CIRCLE_REPOSITORY_URL
            echo "Done kicking off plugin tests."


  test_plugin_macos:
    parameters:
      py_version:
        type: string
      test_plugin:
        type: string
    macos:
      xcode: "10.0.0"
    steps:
      - macos:
          py_version: << parameters.py_version >>
      - run:
          name: << parameters.test_plugin >>
          no_output_timeout: 10m
          command: |
            export NOX_PYTHON_VERSIONS=<< parameters.py_version >>
            export PLUGINS=<< parameters.test_plugin >>
            conda activate hydra
            pip install nox dataclasses
            nox -s lint_plugins test_plugins -ts


  test_plugin_linux:
    parameters:
      py_version:
        type: string
      test_plugin:
        type: string
    docker:
      - image: circleci/python:<< parameters.py_version >>
    steps:
      - linux:
          py_version: << parameters.py_version >>
      - run:
          name: << parameters.test_plugin >>
          command: |
              export NOX_PYTHON_VERSIONS=<< parameters.py_version >>
              export PLUGINS=<< parameters.test_plugin >>
              pip install nox dataclasses
              nox -s lint_plugins test_plugins -ts


  test_plugin_win:
    parameters:
      py_version:
        type: string
      test_plugin:
        type: string
    executor: win/default
    steps:
      - win:
          py_version: << parameters.py_version >>
      - run:
          name: << parameters.test_plugin >>
          no_output_timeout: 20m
          command: |
            $env:NOX_PYTHON_VERSIONS=<< parameters.py_version >>
            $env:PYTHONIOENCODING="utf_8"
            $env:PLUGINS="<< parameters.test_plugin >>"
            conda activate hydra
            nox -s lint_plugins test_plugins -ts
            exit $LASTEXITCODE

  # Misc
  coverage:
    docker:
      - image: circleci/python:3.6
    steps:
      - checkout
      - run: sudo pip install nox
      - run: nox -s coverage

workflows:
  version: 2
  build:
    unless: << pipeline.parameters.plugin_test >>
    jobs:
      - trigger_plugin_piplines
      - test_macos:
          matrix:
            parameters:
              py_version: ["3.6", "3.7", "3.8"]
      - test_linux:
          matrix:
            parameters:
              py_version: ["3.6", "3.7", "3.8"]
      - test_win:
          matrix:
            parameters:
              py_version: ["3.6", "3.7", "3.8"]
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
=======
              nox_session: ["lint", "lint_plugins", "test_core", "test_plugins", "test_jupyter_notebooks"]
=======
              nox_session: ["lint test_core", "lint_plugins test_plugins", "test_jupyter_notebooks"]
>>>>>>> combine some jobs
=======
              nox_session: ["lint", "lint_plugins", "test_core", "test_plugins", "test_jupyter_notebooks"]
>>>>>>> Revert "combine some jobs"
=======
              nox_session: ["lint lint_plugins test_core test_jupyter_notebooks", "test_plugins"]
>>>>>>> Address comments
=======
              nox_session: ["lint lint_plugins test_core test_jupyter_notebooks", "test_example_plugins", "test_hydra_ax_sweeper", "test_hydra_colorlog", "test_hydra_joblib_launcher", "test_hydra_nevergrad_sweeper", "test_hydra_rq_launcher","test_hydra_submitit_launcher" ]
>>>>>>> separate all plugins
=======
              nox_session: ["lint lint_plugins test_core test_jupyter_notebooks", "test_plugins"]
>>>>>>> Revert "separate all plugins"
=======
      - test_plugin_macos:
=======
      - deploy-website:
          filters:
            branches:
              only: master
  plugin_tests:
    when: << pipeline.parameters.plugin_test >>
    jobs:
      - test_plugin_linux:
>>>>>>> test out the script
          matrix:
            parameters:
              py_version: ["3.6", "3.7", "3.8"]
              test_plugin: [<< pipeline.parameters.plugin >>]
      - test_plugin_macos:
          matrix:
            parameters:
              py_version: ["3.6", "3.7", "3.8"]
              test_plugin: [<< pipeline.parameters.plugin >>]
      - test_plugin_win:
          matrix:
            parameters:
              py_version: ["3.6", "3.7", "3.8"]
<<<<<<< HEAD
<<<<<<< HEAD
              plugins: ["examples", "hydra_ax_sweeper", "hydra_colorlog", "hydra_joblib_launcher", "hydra_nevergrad_sweeper", "hydra_rq_launcher", "hydra_submitit_launcher"]
>>>>>>> re-org circleCI file
      - deploy-website:
          filters:
            branches:
              only: master
>>>>>>> Parameterize nox session
=======
              plugin: << pipeline.parameters.plugin >>
=======
              test_plugin: [<< pipeline.parameters.plugin >>]
>>>>>>> fix testplugin

>>>>>>> test out the script

orbs:
  win: circleci/windows@1.0.0

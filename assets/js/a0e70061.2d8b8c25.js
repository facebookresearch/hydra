"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8535],{28453:(e,n,r)=>{r.d(n,{R:()=>t,x:()=>d});var i=r(96540);const o={},a=i.createContext(o);function t(e){const n=i.useContext(a);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:t(e.components),i.createElement(a.Provider,{value:n},e.children)}},72292:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>s,contentTitle:()=>d,default:()=>h,frontMatter:()=>t,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"configure_hydra/job","title":"job","description":"Job configuration","source":"@site/versioned_docs/version-1.0/configure_hydra/job.md","sourceDirName":"configure_hydra","slug":"/configure_hydra/job","permalink":"/docs/1.0/configure_hydra/job","draft":false,"unlisted":false,"editUrl":"https://github.com/facebookresearch/hydra/edit/main/website/versioned_docs/version-1.0/configure_hydra/job.md","tags":[],"version":"1.0","lastUpdatedBy":"Ryan Soklaski","lastUpdatedAt":1761324871000,"frontMatter":{"id":"job","sidebar_label":"Job Configuration","hide_title":true},"sidebar":"docs","previous":{"title":"Introduction","permalink":"/docs/1.0/configure_hydra/intro"},"next":{"title":"Customizing logging","permalink":"/docs/1.0/configure_hydra/logging"}}');var o=r(74848),a=r(28453);const t={id:"job",sidebar_label:"Job Configuration",hide_title:!0},d=void 0,s={},c=[{value:"Job configuration",id:"job-configuration",level:2},{value:"Documentation",id:"documentation",level:2},{value:"hydra.job.name",id:"hydrajobname",level:3},{value:"hydra.job.override_dirname",id:"hydrajoboverride_dirname",level:3},{value:"hydra.job.id",id:"hydrajobid",level:3},{value:"hydra.job.num",id:"hydrajobnum",level:3},{value:"hydra.job.config_name",id:"hydrajobconfig_name",level:3},{value:"hydra.job.env_set",id:"hydrajobenv_set",level:3},{value:"hydra.job.env_copy",id:"hydrajobenv_copy",level:3}];function l(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",img:"img",p:"p",pre:"pre",...(0,a.R)(),...e.components},{Details:r}=n;return r||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"job-configuration",children:"Job configuration"}),"\n",(0,o.jsxs)(n.p,{children:["The job configuration resides in ",(0,o.jsx)(n.code,{children:"hydra.job"}),".\nThe structure definition is below, the latest definition ",(0,o.jsx)(n.a,{href:"https://github.com/facebookresearch/hydra/blob/master/hydra/conf/__init__.py",children:"in the code"}),"."]}),"\n",(0,o.jsxs)(r,{children:[(0,o.jsx)("summary",{children:"Expand definition"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'# job runtime information will be populated here\n@dataclass\nclass JobConf:\n    # Job name, populated automatically unless specified by the user (in config or cli)\n    name: str = MISSING\n\n    # Concatenation of job overrides that can be used as a part\n    # of the directory name.\n    # This can be configured in hydra.job.config.override_dirname\n    override_dirname: str = MISSING\n\n    # Job ID in underlying scheduling system\n    id: str = MISSING\n\n    # Job number if job is a part of a sweep\n    num: int = MISSING\n\n    # The config name used by the job\n    config_name: Optional[str] = MISSING\n\n    # Environment variables to set remotely\n    env_set: Dict[str, str] = field(default_factory=dict)\n    # Environment variables to copy from the launching machine\n    env_copy: List[str] = field(default_factory=list)\n\n    # Job config\n    @dataclass\n    class JobConfig:\n        @dataclass\n        # configuration for the ${hydra.job.override_dirname} runtime variable\n        class OverrideDirname:\n            kv_sep: str = "="\n            item_sep: str = ","\n            exclude_keys: List[str] = field(default_factory=list)\n\n        override_dirname: OverrideDirname = field(default_factory=OverrideDirname)\n\n    config: JobConfig = field(default_factory=JobConfig)\n'})})]}),"\n",(0,o.jsx)(n.h2,{id:"documentation",children:"Documentation"}),"\n",(0,o.jsx)(n.h3,{id:"hydrajobname",children:"hydra.job.name"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"https://github.com/facebookresearch/hydra/tree/1.0_branch/examples/configure_hydra/job_name",children:(0,o.jsx)(n.img,{src:"https://img.shields.io/badge/-Example%20application-informational",alt:"Example application"})})}),"\n",(0,o.jsxs)(n.p,{children:["The job name is used by different things in Hydra, such as the log file name (",(0,o.jsx)(n.code,{children:"${hydra.job.name}.log"}),").\nIt is normally derived from the Python file name (file: ",(0,o.jsx)(n.code,{children:"train.py"})," -> name: ",(0,o.jsx)(n.code,{children:"train"}),").\nYou can override it via the command line or your config file."]}),"\n",(0,o.jsx)(n.h3,{id:"hydrajoboverride_dirname",children:"hydra.job.override_dirname"}),"\n",(0,o.jsx)(n.p,{children:"This field is populated automatically using your command line arguments and is typically being used as a part of your\noutput directory pattern.\nFor example, the command line arguments:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"$ python foo.py a=10 b=20\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Would result in ",(0,o.jsx)(n.code,{children:"hydra.job.override_dirname"})," getting the value a=10,b=20.\nWhen used with the output directory override, it can automatically generate directories that represent the\ncommand line arguments used in your run."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"hydra:\n  run:\n    dir: output/${hydra.job.override_dirname}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["The generation of override_dirname can be controlled by ",(0,o.jsx)(n.code,{children:"hydra.job.config.override_dirname"}),".\nIn particular, the separator char ",(0,o.jsx)(n.code,{children:"="})," and the item separator char ",(0,o.jsx)(n.code,{children:","})," can be modified, and in addition some command line\noverride keys can be automatically excluded from the generated ",(0,o.jsx)(n.code,{children:"override_dirname"}),".\nAn example of a case where the exclude is useful is a random seed."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"hydra:\n  run:\n    dir: output/${hydra.job.override_dirname}/seed=${seed}\n  job:\n    config:\n      override_dirname:\n        exclude_keys:\n          - seed\n"})}),"\n",(0,o.jsx)(n.p,{children:"With this configuration, running"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"$ python foo.py a=10 b=20 seed=999\n"})}),"\n",(0,o.jsx)(n.p,{children:"Would result in a directory like:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"output/a=10,b=20/seed=999\n"})}),"\n",(0,o.jsx)(n.p,{children:"Allowing you to more easily group identical runs with different random seeds together."}),"\n",(0,o.jsx)(n.h3,{id:"hydrajobid",children:"hydra.job.id"}),"\n",(0,o.jsx)(n.p,{children:"The job ID is populated by active Hydra launcher. For the basic launcher, the job ID is just a serial job number, but\nfor other systems this could be the SLURM job ID or the AWS Instance ID."}),"\n",(0,o.jsx)(n.h3,{id:"hydrajobnum",children:"hydra.job.num"}),"\n",(0,o.jsx)(n.p,{children:"Serial job number within this current sweep run. (0 to n-1)"}),"\n",(0,o.jsx)(n.h3,{id:"hydrajobconfig_name",children:"hydra.job.config_name"}),"\n",(0,o.jsx)(n.p,{children:"The config name used by the job, this is populated automatically to match the config name in @hydra.main()"}),"\n",(0,o.jsx)(n.h3,{id:"hydrajobenv_set",children:"hydra.job.env_set"}),"\n",(0,o.jsx)(n.p,{children:"A Dict[str, str] that is used to set the environment variables of the running job.\nSome common use cases are to set environment variables that are effecting underlying libraries, for example"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"hydra:\n  job:\n    env_set:\n      OMP_NUM_THREADS: 1\n"})}),"\n",(0,o.jsx)(n.p,{children:"Disables multithreading in Intel IPP and MKL."}),"\n",(0,o.jsxs)(n.p,{children:["Another example, is to use interpolation to automatically set the rank\nfor ",(0,o.jsx)(n.a,{href:"https://pytorch.org/tutorials/intermediate/dist_tuto.html",children:"Torch Distributed"})," run to match the job number\nin the sweep."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"hydra:\n  job:\n    env_set:\n      RANK: ${hydra:job.num}\n"})}),"\n",(0,o.jsx)(n.h3,{id:"hydrajobenv_copy",children:"hydra.job.env_copy"}),"\n",(0,o.jsx)(n.p,{children:"In some cases you want to automatically copy local environment variables to the running job environment variables.\nThis is particularly useful for remote runs."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"hydra:\n  job:\n    env_copy:\n      - AWS_KEY\n"})})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}}}]);
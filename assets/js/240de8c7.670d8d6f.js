"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1132],{28453:(e,n,o)=>{o.d(n,{R:()=>r,x:()=>a});var t=o(96540);const s={},i=t.createContext(s);function r(e){const n=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),t.createElement(i.Provider,{value:n},e.children)}},63085:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>r,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"tutorials/structured_config/config_store","title":"Config Store API","description":"Throughout the rest of tutorials, we will be using ConfigStore to register dataclasses as input configs in Hydra.","source":"@site/versioned_docs/version-1.3/tutorials/structured_config/10_config_store.md","sourceDirName":"tutorials/structured_config","slug":"/tutorials/structured_config/config_store","permalink":"/docs/1.3/tutorials/structured_config/config_store","draft":false,"unlisted":false,"editUrl":"https://github.com/facebookresearch/hydra/edit/main/website/versioned_docs/version-1.3/tutorials/structured_config/10_config_store.md","tags":[],"version":"1.3","lastUpdatedBy":"Ryan Soklaski","lastUpdatedAt":1761323009000,"sidebarPosition":10,"frontMatter":{"id":"config_store","title":"Config Store API"},"sidebar":"docs","previous":{"title":"Introduction to Structured Configs","permalink":"/docs/1.3/tutorials/structured_config/intro"},"next":{"title":"Minimal example","permalink":"/docs/1.3/tutorials/structured_config/minimal_example"}}');var s=o(74848),i=o(28453);const r={id:"config_store",title:"Config Store API"},a=void 0,c={},l=[{value:"API",id:"api",level:3},{value:"ConfigStore and YAML input configs",id:"configstore-and-yaml-input-configs",level:3},{value:"Example node values",id:"example-node-values",level:3}];function d(e){const n={code:"code",h3:"h3",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["Throughout the rest of tutorials, we will be using ",(0,s.jsx)(n.code,{children:"ConfigStore"})," to register dataclasses as input configs in Hydra.\n",(0,s.jsx)(n.code,{children:"ConfigStore"})," is a singleton storing configs in memory.\nThe primary API for interacting with the ",(0,s.jsx)(n.code,{children:"ConfigStore"})," is the store method described below."]}),"\n",(0,s.jsx)(n.h3,{id:"api",children:"API"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'class ConfigStore(metaclass=Singleton):\n    def store(\n        self,\n        name: str,\n        node: Any,\n        group: Optional[str] = None,\n        package: Optional[str] = "_group_",\n        provider: Optional[str] = None,\n    ) -> None:\n        """\n        Stores a config node into the repository\n        :param name: config name\n        :param node: config node, can be DictConfig, ListConfig,\n            Structured configs and even dict and list\n        :param group: config group, subgroup separator is \'/\',\n            for example hydra/launcher\n        :param package: Config node parent hierarchy.\n            Child separator is \'.\', for example foo.bar.baz\n        :param provider: the name of the module/app providing this config.\n            Helps debugging.\n        """\n    ...\n'})}),"\n",(0,s.jsx)(n.h3,{id:"configstore-and-yaml-input-configs",children:"ConfigStore and YAML input configs"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"ConfigStore"})," has feature parity with YAML input configs. On top of that, it also provides typing validation.\n",(0,s.jsx)(n.code,{children:"ConfigStore"})," can be used alone or together with YAML. We will see more examples later in this series of tutorials.\nFor now, let's see how the ",(0,s.jsx)(n.code,{children:"ConfigStore"})," API translates into the YAML input configs, which we've become more familiar\nwith after the basic tutorials."]}),"\n",(0,s.jsxs)(n.p,{children:["Say we have a simple application and a ",(0,s.jsx)(n.code,{children:"db"})," config group with a ",(0,s.jsx)(n.code,{children:"mysql"})," option:"]}),"\n",(0,s.jsxs)("div",{className:"row",children:[(0,s.jsx)("div",{className:"col col--5",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",metastring:'title="my_app.py"',children:'@hydra.main(version_base=None, config_path="conf")\ndef my_app(cfg: DictConfig) -> None:\n    print(OmegaConf.to_yaml(cfg))\n\n\nif __name__ == "__main__":\n    my_app()\n'})})}),(0,s.jsx)("div",{className:"col  col--4",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",metastring:'title="Directory layout"',children:"\u251c\u2500 conf\n\u2502  \u2514\u2500 db\n\u2502      \u2514\u2500 mysql.yaml\n\u2514\u2500\u2500 my_app.py\n\n\n\n"})})}),(0,s.jsx)("div",{className:"col col--3",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",metastring:'title="db/mysql.yaml"',children:"driver: mysql\nuser: omry\npassword: secret\n\n\n\n\n"})})})]}),"\n",(0,s.jsxs)(n.p,{children:["What if we want to add an ",(0,s.jsx)(n.code,{children:"postgresql"})," option now? Yes, we can easily add a ",(0,s.jsx)(n.code,{children:"db/postgresql.yaml"})," config group option. But\nthat is not the only way! We can also use ",(0,s.jsx)(n.code,{children:"ConfigStore"})," to make another config group option for ",(0,s.jsx)(n.code,{children:"db"})," available to Hydra."]}),"\n",(0,s.jsxs)(n.p,{children:["To achieve this, we add a few lines (highlighted) in the above ",(0,s.jsx)(n.code,{children:"my_app.py"})," file:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",metastring:'title="my_app.py" {1-9}',children:'@dataclass\nclass PostgresSQLConfig:\n    driver: str = "postgresql"\n    user: str = "jieru"\n    password: str = "secret"\n\ncs = ConfigStore.instance()\n# Registering the Config class with the name `postgresql` with the config group `db`\ncs.store(name="postgresql", group="db", node=PostgresSQLConfig)\n\n@hydra.main(version_base=None, config_path="conf")\ndef my_app(cfg: DictConfig) -> None:\n    print(OmegaConf.to_yaml(cfg))\n\n\nif __name__ == "__main__":\n    my_app()\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Now that our application has access to both ",(0,s.jsx)(n.code,{children:"db"})," config group options, let's run the application to verify:"]}),"\n",(0,s.jsxs)("div",{className:"row",children:[(0,s.jsx)("div",{className:"col col--6",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-commandline",metastring:'title="python my_app.py +db=mysql"',children:"db:\n  driver: mysql\n  user: omry\n  password: secret\n\n"})})}),(0,s.jsx)("div",{className:"col  col--6",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-commandline",metastring:'title="python my_app.py +db=postgresql"',children:"db:\n  driver: postgresql\n  user: jieru\n  password: secret\n\n"})})})]}),"\n",(0,s.jsx)(n.h3,{id:"example-node-values",children:"Example node values"}),"\n",(0,s.jsx)(n.p,{children:"A few examples of supported node values parameters:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from dataclasses import dataclass\n\nfrom hydra.core.config_store import ConfigStore\n\n@dataclass\nclass MySQLConfig:\n    host: str = "localhost"\n    port: int = 3306\n\ncs = ConfigStore.instance()\n\n# Using the type\ncs.store(name="config1", node=MySQLConfig)\n# Using an instance, overriding some default values\ncs.store(name="config2", node=MySQLConfig(host="test.db", port=3307))\n# Using a dictionary, forfeiting runtime type safety\ncs.store(name="config3", node={"host": "localhost", "port": 3308})\n'})})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);
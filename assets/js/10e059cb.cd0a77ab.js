"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9310],{28453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>t});var s=i(96540);const a={},l=s.createContext(a);function r(e){const n=s.useContext(l);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),s.createElement(l.Provider,{value:n},e.children)}},43929:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>u,frontMatter:()=>t,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"advanced/override_grammar/basic","title":"basic","description":"Basic Override syntax","source":"@site/docs/advanced/override_grammar/basic.md","sourceDirName":"advanced/override_grammar","slug":"/advanced/override_grammar/basic","permalink":"/docs/advanced/override_grammar/basic","draft":false,"unlisted":false,"editUrl":"https://github.com/facebookresearch/hydra/edit/main/website/docs/advanced/override_grammar/basic.md","tags":[],"version":"current","lastUpdatedBy":"jesszzzz","lastUpdatedAt":1754413947000,"frontMatter":{"id":"basic","hide_title":true,"sidebar_label":"Basic Override syntax"},"sidebar":"docs","previous":{"title":"Hydra\'s command line flags","permalink":"/docs/advanced/hydra-command-line-flags"},"next":{"title":"Extended Override syntax","permalink":"/docs/advanced/override_grammar/extended"}}');var a=i(74848),l=i(28453),r=i(49595);const t={id:"basic",hide_title:!0,sidebar_label:"Basic Override syntax"},o=void 0,d={},c=[{value:"Basic Override syntax",id:"basic-override-syntax",level:2},{value:"Basic examples",id:"basic-examples",level:2},{value:"Modifying the Config Object",id:"modifying-the-config-object",level:3},{value:"Modifying the Defaults List",id:"modifying-the-defaults-list",level:3},{value:"Grammar",id:"grammar",level:2},{value:"Elements",id:"elements",level:2},{value:"Key",id:"key",level:3},{value:"Quoted values",id:"quoted-values",level:3},{value:"Whitespaces in unquoted values",id:"whitespaces-in-unquoted-values",level:3},{value:"Escaped characters in unquoted values",id:"escaped-characters-in-unquoted-values",level:3},{value:"Primitives",id:"primitives",level:3},{value:"Dictionaries and Lists",id:"dictionaries-and-lists",level:2},{value:"Lists",id:"lists",level:3},{value:"Dictionaries",id:"dictionaries",level:3},{value:"Sweeper syntax",id:"sweeper-syntax",level:3},{value:"Functions",id:"functions",level:3},{value:"Working with your shell",id:"working-with-your-shell",level:2},{value:"Bash",id:"bash",level:3},{value:"Other shells",id:"other-shells",level:3}];function h(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"basic-override-syntax",children:"Basic Override syntax"}),"\n",(0,a.jsx)(n.p,{children:"You can manipulate your configuration with overrides (via the command line or the Compose API). This includes:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Modifying the ",(0,a.jsx)(n.code,{children:"Defaults List"})]}),"\n",(0,a.jsx)(n.li,{children:"Modifying the config object"}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["Overrides matching a config group are modifying the ",(0,a.jsx)(n.code,{children:"Defaults List"}),";\nThe rest are manipulating the config object."]}),"\n",(0,a.jsx)(n.h2,{id:"basic-examples",children:"Basic examples"}),"\n",(0,a.jsx)(n.h3,{id:"modifying-the-config-object",children:"Modifying the Config Object"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Overriding a config value : ",(0,a.jsx)(n.code,{children:"foo.bar=value"})]}),"\n",(0,a.jsxs)(n.li,{children:["Appending a config value : ",(0,a.jsx)(n.code,{children:"+foo.bar=value"})]}),"\n",(0,a.jsxs)(n.li,{children:["Appending or overriding a config value : ",(0,a.jsx)(n.code,{children:"++foo.bar=value"})]}),"\n",(0,a.jsxs)(n.li,{children:["Removing a config value : ",(0,a.jsx)(n.code,{children:"~foo.bar"}),", ",(0,a.jsx)(n.code,{children:"~foo.bar=value"})]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"modifying-the-defaults-list",children:"Modifying the Defaults List"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Overriding selected Option: ",(0,a.jsx)(n.code,{children:"db=mysql"}),", ",(0,a.jsx)(n.code,{children:"server/db=mysql"})]}),"\n",(0,a.jsxs)(n.li,{children:["Appending to Defaults List: ",(0,a.jsx)(n.code,{children:"+db=mysql"}),", ",(0,a.jsx)(n.code,{children:"+server/db=mysql"})]}),"\n",(0,a.jsxs)(n.li,{children:["Deleting from Defaults List: ",(0,a.jsx)(n.code,{children:"~db"}),", ",(0,a.jsx)(n.code,{children:"~db=mysql"}),", ",(0,a.jsx)(n.code,{children:"~server/db"}),", ",(0,a.jsx)(n.code,{children:"~server/db=mysql"})]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"grammar",children:"Grammar"}),"\n",(0,a.jsxs)(n.p,{children:["Hydra supports a rich ",(0,a.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Domain-specific_language",children:"DSL"})," in the command line.\nBelow are the parser rules from grammar. You can see the full ",(0,a.jsx)(r.A,{to:"hydra/grammar/OverrideLexer.g4",children:"Lexer"})," and ",(0,a.jsx)(r.A,{to:"hydra/grammar/OverrideParser.g4",children:"Parser"})," definitions on GitHub."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-antlr4",metastring:'title="OverrideParser.g4"',children:"// High-level command-line override.\n\noverride: (\n      key EQUAL value?                           // key=value, key= (for empty value)\n    | TILDE key (EQUAL value?)?                  // ~key | ~key=value\n    | PLUS PLUS? key EQUAL value?                // +key= | +key=value | ++key=value\n) EOF;\n\n// Key:\nkey : packageOrGroup (AT package)?;              // key | group@pkg\n\npackageOrGroup: package | ID (SLASH ID)+;        // db, hydra/launcher\npackage: ( | ID | KEY_SPECIAL | DOT_PATH);       // db, $db, hydra.launcher, or the empty (for _global_ package)\n\n// Elements (that may be swept over).\n\nvalue: element | simpleChoiceSweep;\n\nelement:\n      primitive\n    | listContainer\n    | dictContainer\n    | function\n;\n\nsimpleChoiceSweep:\n      element (COMMA element)+                   // value1,value2,value3\n;\n\n// Functions.\n\nargName: ID EQUAL;\nfunction: ID POPEN (argName? element (COMMA argName? element )* )? PCLOSE;\n\n// Data structures.\n\nlistContainer: BRACKET_OPEN                      // [], [1,2,3], [a,b,[1,2]]\n    (element(COMMA element)*)?\nBRACKET_CLOSE;\n\ndictContainer: BRACE_OPEN (dictKeyValuePair (COMMA dictKeyValuePair)*)? BRACE_CLOSE;  // {}, {a:10,b:20}\ndictKeyValuePair: dictKey COLON element;\n\n// Primitive types.\n\nprimitive:\n      QUOTED_VALUE                               // 'hello world', \"hello world\"\n    | (   ID                                     // foo-bar_10\n        | NULL                                   // null, NULL\n        | INT                                    // 0, 10, -20, 1_000_000\n        | FLOAT                                  // 3.14, -20.0, 1e-1, -10e3\n        | BOOL                                   // true, TrUe, false, False\n        | INTERPOLATION                          // ${foo.bar}, ${oc.env:USER,me}\n        | UNQUOTED_CHAR                          // /, -, \\, +, ., $, %, *, @, ?, |\n        | COLON                                  // :\n        | ESC                                    // \\\\, \\(, \\), \\[, \\], \\{, \\}, \\:, \\=, \\ , \\\\t, \\,\n        | WS                                     // whitespaces\n    )+;\n\n// Same as `primitive` except that `COLON` and `INTERPOLATION` are not allowed.\ndictKey:\n    (   ID                                     // foo-bar_10\n      | NULL                                   // null, NULL\n      | INT                                    // 0, 10, -20, 1_000_000\n      | FLOAT                                  // 3.14, -20.0, 1e-1, -10e3\n      | BOOL                                   // true, TrUe, false, False\n      | UNQUOTED_CHAR                          // /, -, \\, +, ., $, %, *, @, ?, |\n      | ESC                                    // \\\\, \\(, \\), \\[, \\], \\{, \\}, \\:, \\=, \\ , \\\\t, \\,\n      | WS                                     // whitespaces\n    )+;\n"})}),"\n",(0,a.jsx)(n.h2,{id:"elements",children:"Elements"}),"\n",(0,a.jsx)(n.h3,{id:"key",children:"Key"}),"\n",(0,a.jsx)(n.p,{children:"Key is the component before the =. A few examples:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-shell",metastring:"script",children:"foo.bar           # A config key\nhydra/launcher    # A config group\ngroup@pkg         # A config group assigned to the package pkg\ngroup@pkg1:pkg2   # A config group changing the package from pkg1 to pkg2\n"})}),"\n",(0,a.jsx)(n.h3,{id:"quoted-values",children:"Quoted values"}),"\n",(0,a.jsx)(n.p,{children:"Hydra supports both double quotes and single quoted values.\nQuoted strings can accept any value between the quotes, but some characters need escaping:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["to include a single quote in a single quoted string, use ",(0,a.jsx)(n.code,{children:"\\'"})," (for double quotes in a double quoted string, use ",(0,a.jsx)(n.code,{children:'\\"'}),")"]}),"\n",(0,a.jsxs)(n.li,{children:["any sequence of ",(0,a.jsx)(n.code,{children:"\\"})," characters preceding a quote (either an escaped quote as described in the previous point, or the closing quote)\nmust be escaped by doubling the number of ",(0,a.jsx)(n.code,{children:"\\"})]}),"\n"]}),"\n",(0,a.jsxs)("div",{className:"row",children:[(0,a.jsx)("div",{className:"col col--6",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",metastring:'title="Double quotes"',children:'"hello there"\n"escaped \\"double quote\\""\n"the path is C:\\\\\\"some folder\\"\\\\"\n"1,2,3"\n"{a:10} ${xyz}"\n"\'single quoted string\'"\n'})})}),(0,a.jsx)("div",{className:"col  col--6",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",metastring:'title="Single quotes"',children:"'hello there'\n'escaped \\'single quote\\''\n'the path is C:\\\\\\'some folder\\'\\\\'\n'1,2,3'\n'{a:10} ${xyz}'\n'\"double quoted string\"'\n"})})})]}),"\n",(0,a.jsx)(n.p,{children:"It may be necessary to use multiple pairs of quotes to prevent your\nshell from consuming quotation marks before they are passed to hydra."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-shell",children:"$ python my_app.py '+foo=\"{a: 10}\"'\nfoo: '{a: 10}'\n\n$ python my_app.py '+foo={a: 10}'\nfoo:\n  a: 10\n\n"})}),"\n",(0,a.jsx)(n.p,{children:"Here are some best practices around quoting in CLI overrides:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Quote the whole key=value pair with single quotes, as in the first two\nexamples above. These quotes are for the benefit of the shell."}),"\n",(0,a.jsx)(n.li,{children:"Do not quote keys."}),"\n",(0,a.jsx)(n.li,{children:"Only quote values if they contain a space. It will work if you always quote\nvalues, but it will turn numbers/dicts/lists into strings (as in the first\nexample above)."}),"\n",(0,a.jsx)(n.li,{children:"When you are quoting values, use double quotes to avoid collision with the\nouter single quoted consumed by the shell."}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"whitespaces-in-unquoted-values",children:"Whitespaces in unquoted values"}),"\n",(0,a.jsxs)(n.p,{children:["Unquoted Override values can contain non leading or trailing whitespaces.\nFor example, ",(0,a.jsx)(n.code,{children:"msg=hello world"})," is a legal override (key is ",(0,a.jsx)(n.code,{children:"msg"})," and value is the string ",(0,a.jsx)(n.code,{children:"hello world"}),").\nNormally, your shell will interpret values with whitespaces as being multiple parameters (",(0,a.jsx)(n.code,{children:"key=a b"})," would be interpreted as ",(0,a.jsx)(n.code,{children:"key=a"})," and ",(0,a.jsx)(n.code,{children:"b"}),").\nTo prevent this you can quote them with a single quote. For example:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-shell",children:"$ python my_app.py 'msg=hello world'\n"})}),"\n",(0,a.jsx)(n.p,{children:"Note that trailing and leading whitespace are ignored, the above is equivalent to:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-shell",children:"$ python my_app.py 'msg=    hello world    '\n"})}),"\n",(0,a.jsx)(n.h3,{id:"escaped-characters-in-unquoted-values",children:"Escaped characters in unquoted values"}),"\n",(0,a.jsxs)(n.p,{children:["Hydra's parser considers some characters to be illegal in unquoted strings.\nThese otherwise special characters may be included in unquoted values by escaping them with a ",(0,a.jsx)(n.code,{children:"\\"}),".\nThese characters are: ",(0,a.jsx)(n.code,{children:"\\()[]{}:=, \\t"})," (the last two ones being the whitespace and tab characters)."]}),"\n",(0,a.jsxs)(n.p,{children:["As an example, in the following ",(0,a.jsx)(n.code,{children:"dir"})," is set to the string ",(0,a.jsx)(n.code,{children:"job{a=1,b=2,c=3}"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-shell",children:"$ python my_app.py 'dir=job\\{a\\=1\\,b\\=2\\,c\\=3\\}'\n"})}),"\n",(0,a.jsx)(n.p,{children:"As an alternative to escaping special characters with a backslash, the value containing the special character may be quoted:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-shell",children:"$ python my_app.py 'dir=A[B'    # parser error\n$ python my_app.py 'dir=\"A[B\"'  # ok\n$ python my_app.py 'dir=A\\[B'   # ok\n"})}),"\n",(0,a.jsx)(n.h3,{id:"primitives",children:"Primitives"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"id"})," : oompa10, loompa_12"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"null"}),": null"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"int"}),": 10, -20, 0, 1_000_000."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"float"}),": 3.14, -10e6, inf, -inf, nan."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"bool"}),": true, false"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"dot_path"}),": foo.bar"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"interpolation"}),": ${foo.bar}, ${oc.env",":USER",",me}"]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"Constants (null, true, false, inf, nan) are case-insensitive."}),"\n",(0,a.jsxs)(n.admonition,{type:"important",children:[(0,a.jsx)(n.p,{children:"Always single-quote interpolations in the shell, to prevent replacement with shell variables:"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-shell",children:"$ python my_app.py 'dir=/root/${name}'\n"})}),(0,a.jsx)(n.p,{children:"In addition, more complex interpolations containing special characters may require being passed within a quoted value\n(note the extra double quotes surrounding the interpolation):"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-shell",children:"$ python my_app.py 'dir=\"${get_dir: {root: /root, name: ${name}}}\"'\n"})})]}),"\n",(0,a.jsx)(n.h2,{id:"dictionaries-and-lists",children:"Dictionaries and Lists"}),"\n",(0,a.jsx)(n.h3,{id:"lists",children:"Lists"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"foo=[1,2,3]\nnested=[a,[b,[c]]]\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Lists are assigned, not merged. To extend an existing list, use the ",(0,a.jsxs)(n.a,{href:"/docs/advanced/override_grammar/extended#extending-lists",children:[(0,a.jsx)(n.code,{children:"extend_list"})," function"]}),"."]}),"\n",(0,a.jsx)(n.h3,{id:"dictionaries",children:"Dictionaries"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"foo={a:10,b:20}\nnested={a:10,b:{c:30,d:40}}\n"})}),"\n",(0,a.jsx)(n.p,{children:"Dictionaries are merged, not assigned. The following example illustrates the point:"}),"\n",(0,a.jsxs)("div",{className:"row",children:[(0,a.jsx)("div",{className:"col col--6",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",metastring:'title="Input config"',children:"db:\n  driver: mysql\n  user: ???\n  pass: ???\n"})})}),(0,a.jsx)("div",{className:"col  col--6",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",metastring:'title="db={user:root,pass:1234}"',children:"db:\n  driver: mysql\n  user: root\n  pass: 1234\n"})})})]}),"\n",(0,a.jsx)(n.admonition,{type:"important",children:(0,a.jsx)(n.p,{children:"Always single-quote overrides that contains dicts and lists in the shell."})}),"\n",(0,a.jsx)(n.h3,{id:"sweeper-syntax",children:"Sweeper syntax"}),"\n",(0,a.jsx)(n.p,{children:"A choice sweep is comma separated list with two or more elements:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-shell",metastring:"script",children:'key=a,b                       # Simple sweep: ChoiceSweep(a, b)\nkey="a,b","c,d"               # Elements can be quoted strings, ChoiceSweep("a,b", "c,d")\nkey=[a,b],[c,d]               # Elements can be real lists, ChoiceSweep([a,b], [c,d])\nkey={a:10, b:20},{c:30,d:40}  # And dictionaries: ChoiceSweep({a:10, b:20}, {c:30,d:40})\n'})}),"\n",(0,a.jsxs)(n.p,{children:["More sweeping options are described in the ",(0,a.jsx)(n.a,{href:"/docs/advanced/override_grammar/extended",children:"Extended Grammar page"}),"."]}),"\n",(0,a.jsx)(n.admonition,{type:"important",children:(0,a.jsx)(n.p,{children:"You may need to quote your choice sweep in the shell."})}),"\n",(0,a.jsx)(n.h3,{id:"functions",children:"Functions"}),"\n",(0,a.jsxs)(n.p,{children:["Hydra supports several functions in the command line.\nSee the ",(0,a.jsx)(n.a,{href:"/docs/advanced/override_grammar/extended",children:"Extended Grammar page"})," for more information."]}),"\n",(0,a.jsx)(n.h2,{id:"working-with-your-shell",children:"Working with your shell"}),"\n",(0,a.jsxs)(n.p,{children:["All shells interprets command line inputs and may change what is passed to the process.\nA good way to determine what the shell is doing to your command is to ",(0,a.jsx)(n.code,{children:"echo"})," it."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-shell",metastring:"script",children:"# bash output\n$ echo foo_{a:10,b:20} ${HOME} [b,c]*\nfoo_a:10 foo_b:20 /home/omry build_helpers\n$ echo 'foo_{a:10,b:20}' '${HOME}' '[b,c]*'\nfoo_{a:10,b:20} ${HOME} [b,c]*\n"})}),"\n",(0,a.jsxs)(n.p,{children:["If in doubt, quote a command line element with a ",(0,a.jsx)(n.strong,{children:"single quote"})," (",(0,a.jsx)(n.code,{children:"'"}),")."]}),"\n",(0,a.jsx)(n.p,{children:"If you want to pass quotes to Hydra in a shell quoted string, it's best to pass double quotes."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-shell",metastring:"script",children:'$ echo \'"hello world"\'\n"hello world"\n'})}),"\n",(0,a.jsx)(n.p,{children:"You can use some shell specific commands to change their behavior, but the cost will be that their behavior will change."}),"\n",(0,a.jsx)(n.h3,{id:"bash",children:"Bash"}),"\n",(0,a.jsx)(n.p,{children:"You can disable braces expansion, filename generation (globing) and hist expansion. Please note that this will change\nyour shell behavior for the current session."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-shell",metastring:"script",children:"$ set +o braceexpand -o noglob +o histexpand\n$ echo key1={a:10,b:20} key2=${HOME} key=[b]*\nkey1={a:10,b:20} key2=/home/omry key=[b]*\n# does not help with () though:\n$ echo key=choice(a,b,c)\nbash: syntax error near unexpected token '('\n$ echo 'key=choice(a,b,c)'\nkey=choice(a,b,c)\n"})}),"\n",(0,a.jsx)(n.h3,{id:"other-shells",children:"Other shells"}),"\n",(0,a.jsx)(n.p,{children:"Send a PR to add information about your favorite shell here."})]})}function u(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},49595:(e,n,i)=>{i.d(n,{A:()=>o,C:()=>d});i(96540);var s=i(28774),a=i(44586),l=i(48295),r=i(74848);function t(e){const n=(0,l.ir)();return(0,a.default)().siteConfig.customFields.githubLinkVersionToBaseUrl[n?.name??"current"]+e}function o(e){return(0,r.jsx)(s.default,{...e,to:t(e.to),target:"_blank"})}function d(e){const n=e.text??"Example (Click Here)";return(0,r.jsxs)(o,{...e,children:[(0,r.jsx)("span",{children:"\xa0"}),(0,r.jsx)("img",{src:"https://img.shields.io/badge/-"+n+"-informational",alt:"Example (Click Here)"})]})}}}]);
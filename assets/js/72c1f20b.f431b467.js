"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9910],{28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var s=t(96540);const o={},i=s.createContext(o);function r(e){const n=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),s.createElement(i.Provider,{value:n},e.children)}},49595:(e,n,t)=>{t.d(n,{A:()=>c,C:()=>d});t(96540);var s=t(28774),o=t(44586),i=t(48295),r=t(74848);function a(e){const n=(0,i.ir)();return(0,o.default)().siteConfig.customFields.githubLinkVersionToBaseUrl[n?.name??"current"]+e}function c(e){return(0,r.jsx)(s.default,{...e,to:a(e.to),target:"_blank"})}function d(e){const n=e.text??"Example (Click Here)";return(0,r.jsxs)(c,{...e,children:[(0,r.jsx)("span",{children:"\xa0"}),(0,r.jsx)("img",{src:"https://img.shields.io/badge/-"+n+"-informational",alt:"Example (Click Here)"})]})}},89148:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"tutorials/structured_config/schema","title":"Structured config schema","description":"We have seen how to use Structured Configs as configuration, but they can also be used as a schema (i.e. validating configuration files).","source":"@site/versioned_docs/version-1.0/tutorials/structured_config/5_schema.md","sourceDirName":"tutorials/structured_config","slug":"/tutorials/structured_config/schema","permalink":"/docs/1.0/tutorials/structured_config/schema","draft":false,"unlisted":false,"editUrl":"https://github.com/facebookresearch/hydra/edit/main/website/versioned_docs/version-1.0/tutorials/structured_config/5_schema.md","tags":[],"version":"1.0","lastUpdatedBy":"jesszzzz","lastUpdatedAt":1754333694000,"sidebarPosition":5,"frontMatter":{"id":"schema","title":"Structured config schema"},"sidebar":"docs","previous":{"title":"Defaults List","permalink":"/docs/1.0/tutorials/structured_config/defaults"},"next":{"title":"Static schema with many configs","permalink":"/docs/1.0/tutorials/structured_config/static_schema"}}');var o=t(74848),i=t(28453),r=t(49595);const a={id:"schema",title:"Structured config schema"},c=void 0,d={},l=[];function f(e){const n={code:"code",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(r.C,{to:"examples/tutorials/structured_configs/5_structured_config_schema"}),"\n",(0,o.jsx)(n.p,{children:"We have seen how to use Structured Configs as configuration, but they can also be used as a schema (i.e. validating configuration files)."}),"\n",(0,o.jsxs)(n.p,{children:["When Hydra loads a config file, it looks in the ",(0,o.jsx)(n.code,{children:"ConfigStore"})," for a Structured Config with a matching name and group.\nIf found, it is used as the schema for the newly loaded config."]}),"\n",(0,o.jsxs)(n.p,{children:["This page shows how to validate ",(0,o.jsx)(n.code,{children:"db/mysql.yaml"})," and ",(0,o.jsx)(n.code,{children:"db/postgresql.yaml"})," files against a pre-defined schema."]}),"\n",(0,o.jsx)(n.p,{children:"Given the config directory structure:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-text",children:"conf/\n\u251c\u2500\u2500 config.yaml\n\u2514\u2500\u2500 db\n    \u251c\u2500\u2500 mysql.yaml\n    \u2514\u2500\u2500 postgresql.yaml\n"})}),"\n",(0,o.jsxs)(n.p,{children:["We can add Structured Configs for ",(0,o.jsx)(n.code,{children:"mysql.yaml"})," and ",(0,o.jsx)(n.code,{children:"postgresql.yaml"}),", providing a schema for validating them."]}),"\n",(0,o.jsxs)(n.p,{children:["The Structured Configs below are stored as ",(0,o.jsx)(n.code,{children:"db/mysql"})," and ",(0,o.jsx)(n.code,{children:"db/postgresql"}),". They will be used as schema\nwhen we load their corresponding config files."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",metastring:'title="my_app.py"',children:'@dataclass\nclass DBConfig:\n    driver: str = MISSING\n    host: str = "localhost"\n    port: int = MISSING\n\n\n@dataclass\nclass MySQLConfig(DBConfig):\n    driver: str = "mysql"\n    port: int = 3306\n    user: str = MISSING\n    password: str = MISSING\n\n@dataclass\nclass PostGreSQLConfig(DBConfig):\n    driver: str = "postgresql"\n    user: str = MISSING\n    port: int = 5432\n    password: str = MISSING\n    timeout: int = 10\n\n@dataclass\nclass Config:\n    # Note the lack of defaults list here.\n    # In this example it comes from config.yaml\n    db: DBConfig = MISSING\n\ncs = ConfigStore.instance()\ncs.store(name="config", node=Config)\ncs.store(group="db", name="mysql", node=MySQLConfig)\ncs.store(group="db", name="postgresql", node=PostGreSQLConfig)\n\n# The config name matches both \'config.yaml\' under the conf directory\n# and \'config\' stored in the ConfigStore.\n# config.yaml will compose in db: mysql by default (per the defaults list),\n# and it will be validated against the schema from the Config class\n@hydra.main(config_path="conf", config_name="config")\ndef my_app(cfg: Config) -> None:\n    print(OmegaConf.to_yaml(cfg))\n'})}),"\n",(0,o.jsxs)(n.p,{children:["When ",(0,o.jsx)(n.code,{children:"db/mysql.yaml"})," and ",(0,o.jsx)(n.code,{children:"db/postgresql.yaml"})," are loaded, the corresponding configs from the ",(0,o.jsx)(n.code,{children:"ConfigStore"})," are used automatically.\nThis can be used to validate that both the configuration files (",(0,o.jsx)(n.code,{children:"mysql.yaml"})," and ",(0,o.jsx)(n.code,{children:"postgresql.yaml"}),") and the command line overrides are conforming to the schema."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"$ python my_app.py db.port=fail\nError merging override db.port=fail\nValue 'fail' could not be converted to Integer\n        full_key: db.port\n        reference_type=Optional[MySQLConfig]\n        object_type=MySQLConfig\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Unlike the example in the previous page, the Defaults List here is ",(0,o.jsx)(n.code,{children:"config.yaml"})," and ",(0,o.jsx)(n.strong,{children:"not"})," in the ",(0,o.jsx)(n.code,{children:"Config"})," class."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",metastring:'title="config.yaml"',children:"defaults:\n  - db: mysql\n"})})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(f,{...e})}):f(e)}}}]);
"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3711],{28453:(e,n,o)=>{o.d(n,{R:()=>a,x:()=>r});var t=o(96540);const s={},i=t.createContext(s);function a(e){const n=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),t.createElement(i.Provider,{value:n},e.children)}},39978:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>u,frontMatter:()=>a,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"tutorial/composition","title":"Config composition","description":"As software gets more complex, we resort to modularity and composition to keep it manageable.","source":"@site/versioned_docs/version-0.11/tutorial/5_composition.md","sourceDirName":"tutorial","slug":"/tutorial/composition","permalink":"/docs/0.11/tutorial/composition","draft":false,"unlisted":false,"editUrl":"https://github.com/facebookresearch/hydra/edit/main/website/versioned_docs/version-0.11/tutorial/5_composition.md","tags":[],"version":"0.11","lastUpdatedBy":"jesszzzz","lastUpdatedAt":1754413947000,"sidebarPosition":5,"frontMatter":{"id":"composition","title":"Config composition","sidebar_label":"Config composition"},"sidebar":"docs","previous":{"title":"Defaults","permalink":"/docs/0.11/tutorial/defaults"},"next":{"title":"Multi-run","permalink":"/docs/0.11/tutorial/multi-run"}}');var s=o(74848),i=o(28453);const a={id:"composition",title:"Config composition",sidebar_label:"Config composition"},r=void 0,c={},l=[];function d(e){const n={code:"code",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"As software gets more complex, we resort to modularity and composition to keep it manageable.\nWe can do the same with configs: suppose we want our working example to support multiple databases, with\nmultiple schemas per database, and different UIs. We wouldn't write a separate class\nfor each permutation of db, schema and UI, so we shouldn't write separate configs either. We use\nthe same solution in configuration as in writing the underlying software: composition."}),"\n",(0,s.jsxs)(n.p,{children:["To do this in Hydra, we first add a ",(0,s.jsx)(n.code,{children:"schema"})," and a ",(0,s.jsx)(n.code,{children:"ui"})," config group:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"\u251c\u2500\u2500 conf\n\u2502\xa0\xa0 \u251c\u2500\u2500 config.yaml\n\u2502\xa0\xa0 \u251c\u2500\u2500 db\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u251c\u2500\u2500 mysql.yaml\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u2514\u2500\u2500 postgresql.yaml\n\u2502\xa0\xa0 \u251c\u2500\u2500 schema\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u251c\u2500\u2500 school.yaml\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u251c\u2500\u2500 support.yaml\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u2514\u2500\u2500 warehouse.yaml\n\u2502\xa0\xa0 \u2514\u2500\u2500 ui\n\u2502\xa0\xa0     \u251c\u2500\u2500 full.yaml\n\u2502\xa0\xa0     \u2514\u2500\u2500 view.yaml\n\u2514\u2500\u2500 my_app.py\n"})}),"\n",(0,s.jsxs)(n.p,{children:["With these configs, we already have 12 possible combinations. Without composition we would need 12 separate configs,\nand a single change (such as renaming ",(0,s.jsx)(n.code,{children:"db.user"})," to ",(0,s.jsx)(n.code,{children:"db.username"}),") would need to be done separately in every one of them."]}),"\n",(0,s.jsx)(n.p,{children:"This is a maintainability nightmare -- but composition can come to the rescue."}),"\n",(0,s.jsxs)(n.p,{children:["Configuration file: ",(0,s.jsx)(n.code,{children:"config.yaml"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"defaults:\n  - db: mysql\n  - ui: full\n  - schema: school\n"})}),"\n",(0,s.jsx)(n.p,{children:"The defaults are ordered:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"If there are two configurations that defines the same value, the second one would win."}),"\n",(0,s.jsx)(n.li,{children:"If two configurations are contributing to the same dictionary the result would be the combined dictionary."}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["When running this, we will compose a configuration with ",(0,s.jsx)(n.code,{children:"mysql"}),", ",(0,s.jsx)(n.code,{children:"full"})," ui and the ",(0,s.jsx)(n.code,{children:"school"})," database schema (which we are seeing for the first time here):"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"$ python my_app.py\ndb:\n  driver: mysql\n  pass: secret\n  user: omry\nschema:\n  database: school\n  tables:\n  - fields:\n    - name: string\n    - class: int\n    name: students\n  - fields:\n    - profession: string\n    - time: data\n    - class: int\n    name: exams\nui:\n  windows:\n    create_db: true\n    view: true\n"})}),"\n",(0,s.jsxs)(n.p,{children:["In much the same way you can compose any of the other 11 configurations by adding appropriate overrides such as ",(0,s.jsx)(n.code,{children:"db=postgresql"}),"."]})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);
"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9900],{15680:(e,t,a)=>{a.r(t),a.d(t,{MDXContext:()=>m,MDXProvider:()=>c,mdx:()=>g,useMDXComponents:()=>d,withMDXComponents:()=>p});var n=a(96540);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(){return i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e},i.apply(this,arguments)}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var m=n.createContext({}),p=function(e){return function(t){var a=d(t.components);return n.createElement(e,i({},t,{components:a}))}},d=function(e){var t=n.useContext(m),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},c=function(e){var t=d(e.components);return n.createElement(m.Provider,{value:t},e.children)},u="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),p=d(a),c=r,u=p["".concat(o,".").concat(c)]||p[c]||h[c]||i;return a?n.createElement(u,l(l({ref:t},m),{},{components:a})):n.createElement(u,l({ref:t},m))}));function g(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=f;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:r,o[1]=l;for(var m=2;m<i;m++)o[m]=a[m];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}f.displayName="MDXCreateElement"},65442:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>l,toc:()=>m});var n=a(58168),r=(a(96540),a(15680));const i={title:"Hydra 1.2",author:"Padraig Brady",author_url:"https://github.com/pixelb",author_image_url:"https://graph.facebook.com/733244046/picture/?height=200&width=200",tags:["Hydra","Release"],image:"/img/Hydra-Readme-logo2.svg"},o=void 0,l={permalink:"/blog/2022/05/18/Hydra_1.2",source:"@site/blog/2022-05-18-Hydra_1.2.md",title:"Hydra 1.2",description:"After many months and a lot of hard work by many people, Hydra 1.2 is released!",date:"2022-05-18T00:00:00.000Z",formattedDate:"May 18, 2022",tags:[{label:"Hydra",permalink:"/blog/tags/hydra"},{label:"Release",permalink:"/blog/tags/release"}],readingTime:3.12,hasTruncateMarker:!0,authors:[{name:"Padraig Brady",url:"https://github.com/pixelb",imageURL:"https://graph.facebook.com/733244046/picture/?height=200&width=200"}],frontMatter:{title:"Hydra 1.2",author:"Padraig Brady",author_url:"https://github.com/pixelb",author_image_url:"https://graph.facebook.com/733244046/picture/?height=200&width=200",tags:["Hydra","Release"],image:"/img/Hydra-Readme-logo2.svg"},nextItem:{title:"Hydra 1.1",permalink:"/blog/2021/06/13/Hydra_1.1"}},s={authorsImageUrls:[void 0]},m=[{value:"Major new features in Hydra 1.2",id:"major-new-features-in-hydra-12",level:3},{value:"Object instantiation enhancements",id:"object-instantiation-enhancements",level:4},{value:"OmegaConf 2.2 highlights",id:"omegaconf-22-highlights",level:3},{value:"More flexible type hints in structured configs",id:"more-flexible-type-hints-in-structured-configs",level:4},{value:"Native support for bytes and pathlib.Path",id:"native-support-for-bytes-and-pathlibpath",level:4},{value:"Migrating from 1.1",id:"migrating-from-11",level:3}],p={toc:m},d="wrapper";function c(e){let{components:t,...a}=e;return(0,r.mdx)(d,(0,n.A)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.mdx)("p",{align:"center"},(0,r.mdx)("img",{src:"/img/Hydra-Readme-logo2.svg",alt:"logo",width:"70%"})),(0,r.mdx)("p",null,"After many months and a lot of hard work by many people, Hydra 1.2 is released!\nHydra 1.2 comes with OmegaConf 2.2, which has its own share of improvements."),(0,r.mdx)("p",null,"This blog post highlights some of the most prominent features, check the release notes for a complete list of changes:"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},"Hydra 1.2 ",(0,r.mdx)("a",{parentName:"li",href:"https://github.com/facebookresearch/hydra/releases/tag/v1.2.0"},"release notes")),(0,r.mdx)("li",{parentName:"ul"},"OmegaConf 2.2 ",(0,r.mdx)("a",{parentName:"li",href:"https://github.com/omry/omegaconf/releases/tag/v2.2.1"},"release notes"))),(0,r.mdx)("h3",{id:"major-new-features-in-hydra-12"},"Major new features in Hydra 1.2"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},"Easier integration with existing systems",(0,r.mdx)("ul",{parentName:"li"},(0,r.mdx)("li",{parentName:"ul"},"Support not changing working directory at runtime"),(0,r.mdx)("li",{parentName:"ul"},"Default to not implicitly adding directories to the config path"))),(0,r.mdx)("li",{parentName:"ul"},"Improved support for reproducible experiments",(0,r.mdx)("ul",{parentName:"li"},(0,r.mdx)("li",{parentName:"ul"},"Support defining multirun mode and sweeping parameters through config"),(0,r.mdx)("li",{parentName:"ul"},"Improved callback support for logging / persisting job runs"),(0,r.mdx)("li",{parentName:"ul"},"A new ",(0,r.mdx)("inlineCode",{parentName:"li"},"--experimental-rerun")," option to reproduce persisted single runs"))),(0,r.mdx)("li",{parentName:"ul"},"Improved instantiate API functionality",(0,r.mdx)("ul",{parentName:"li"},(0,r.mdx)("li",{parentName:"ul"},"Support for instances partially defined from config, via a ",(0,r.mdx)("inlineCode",{parentName:"li"},"_partial_")," keyword"),(0,r.mdx)("li",{parentName:"ul"},"Accept ",(0,r.mdx)("inlineCode",{parentName:"li"},"ListConfig"),"/",(0,r.mdx)("inlineCode",{parentName:"li"},"list"),"-type config as top-level input"))),(0,r.mdx)("li",{parentName:"ul"},"Better alignment with ecosystem versions",(0,r.mdx)("ul",{parentName:"li"},(0,r.mdx)("li",{parentName:"ul"},"Support for Python 3.10, and ANTLR 4.9"))),(0,r.mdx)("li",{parentName:"ul"},"OmegaConf 2.2:",(0,r.mdx)("ul",{parentName:"li"},(0,r.mdx)("li",{parentName:"ul"},"More flexible type hints in structured configs"),(0,r.mdx)("li",{parentName:"ul"},"Native support for bytes and pathlib.Path")))),(0,r.mdx)("h4",{id:"object-instantiation-enhancements"},"Object instantiation enhancements"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},"Lists can now be passed directly to the instantiate API.\nFor example one can now do:")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-python"},'from hydra.utils import instantiate\n\nlst = [\n    {"_target_": "pathlib.Path", "_args_": ["foo"]},\n    {"_target_": "pathlib.Path", "_args_": ["bar"]},\n]\n\npaths = instantiate(lst)\nprint(paths)\n')),(0,r.mdx)("p",null,"Resulting in:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-python"},"$ python demo.py\n[PosixPath('foo'), PosixPath('bar')]\n")),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},"Instances can now be partially defined in config with the ",(0,r.mdx)("inlineCode",{parentName:"li"},"_partial_")," keyword.\nPlease see the ",(0,r.mdx)("a",{parentName:"li",href:"/docs/advanced/instantiate_objects/overview/#partial-instantiation"},"Instantiate API - Partial Instantiation")," docs\nfor a detailed example.")),(0,r.mdx)("h3",{id:"omegaconf-22-highlights"},"OmegaConf 2.2 highlights"),(0,r.mdx)("h4",{id:"more-flexible-type-hints-in-structured-configs"},"More flexible type hints in structured configs"),(0,r.mdx)("p",null,"OmegaConf 2.2's structured configs support runtime type checking for an expanded set of type hints.\nIt is now possible to use nested container types (e.g. dict-of-dict or list-of-list),\nunions of primitive types, and containers with optional element types."),(0,r.mdx)("p",null,"Here is an example demonstrating these new capabilities:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-python"},"from dataclasses import dataclass\nfrom typing import Dict, List, Optional, Union\nfrom omegaconf import OmegaConf\n\n@dataclass\nclass DemoConfig:\n    union: Union[int, str, bool]\n    dict_of_union: Dict[str, Union[int, str]]\n    list_of_dict: List[Dict[int, float]]\n    dict_of_optional: Dict[str, Optional[int]]\n\ncfg = OmegaConf.structured({\"foo\": DemoConfig})\ncfg.foo.dict_of_union = {\"abc\": 123}  # ok\ncfg.foo.dict_of_union = {\"abc\": 10.1}  # raises ValidationError!\n# Value '10.1' of type 'float' is incompatible with type hint 'Union[int, str]'\n")),(0,r.mdx)("h4",{id:"native-support-for-bytes-and-pathlibpath"},"Native support for bytes and pathlib.Path"),(0,r.mdx)("p",null,"OmegaConf now supports binary data via Python's bytes type."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-python"},'cfg = OmegaConf.create({b"binary_key": b"binary_value"})\n')),(0,r.mdx)("p",null,"In addition, OmegaConf now supports ",(0,r.mdx)("inlineCode",{parentName:"p"},"pathlib.Path")," instances as config values, easing workflows that involve the file system."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-python"},"from pathlib import Path\ncfg.my_homedir = Path.home()\nassert cfg.my_homedir.is_dir()\n")),(0,r.mdx)("p",null,"The ",(0,r.mdx)("inlineCode",{parentName:"p"},"bytes")," and ",(0,r.mdx)("inlineCode",{parentName:"p"},"pathlib.Path")," types can be used as type hints in structured config class definitions,\nand configs containing binary and Path data can be round-tripped to/from yaml files via OmegaConf's save/load/to_yaml/create methods."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-python"},'yaml_data = OmegaConf.to_yaml(cfg)\ncfg2 = OmegaConf.create(yaml_data)\nassert cfg2[b"binary_key"] == b"binary_value"\nassert isinstance(cfg2.my_homedir, Path)\n')),(0,r.mdx)("h3",{id:"migrating-from-11"},"Migrating from 1.1"),(0,r.mdx)("p",null,"Hydra 1.2 is a major release. For most people, migrating from 1.1 to 1.2 will be smooth.\nIn addition, for this release we introduce support for more compatible upgrades\nthrough the ",(0,r.mdx)("a",{parentName:"p",href:"/docs/upgrades/version_base/"},"version_base")," mechanism.\nNew users are encouraged to use the latest defaults by setting ",(0,r.mdx)("inlineCode",{parentName:"p"},"version_base=None")," with ",(0,r.mdx)("inlineCode",{parentName:"p"},"@hydra.main()")," and ",(0,r.mdx)("inlineCode",{parentName:"p"},"hydra.initialize()"),',\nwhile existing users have more control over what potentially incompatible changes are introduced when upgrading to Hydra 1.2.\nPlease see the "Behavior changes" section of the ',(0,r.mdx)("a",{parentName:"p",href:"https://github.com/facebookresearch/hydra/releases/tag/v1.2.0"},"Hydra 1.2 release notes")," for details.\nOmegaConf 2.2 also has some API changes and deprecations (not protected by version_base), detailed in its ",(0,r.mdx)("a",{parentName:"p",href:"https://github.com/omry/omegaconf/releases/tag/v2.2.1"},"release notes"),".\nPlease feel free to reach out for ",(0,r.mdx)("a",{parentName:"p",href:"/docs/intro#community"},"help")," if you see a change in behavior that is not mentioned in the release notes."),(0,r.mdx)("p",null,"That's it for now, take Hydra 1.2 for a spin!"))}c.isMDXComponent=!0}}]);
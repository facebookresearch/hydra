"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9025],{28453:(e,t,n)=>{n.d(t,{R:()=>c,x:()=>o});var s=n(96540);const a={},i=s.createContext(a);function c(e){const t=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:c(e.components),s.createElement(i.Provider,{value:t},e.children)}},49595:(e,t,n)=>{n.d(t,{A:()=>r,C:()=>l});n(96540);var s=n(28774),a=n(44586),i=n(48295),c=n(74848);function o(e){const t=(0,i.ir)();return(0,a.default)().siteConfig.customFields.githubLinkVersionToBaseUrl[t?.name??"current"]+e}function r(e){return(0,c.jsx)(s.default,{...e,to:o(e.to),target:"_blank"})}function l(e){const t=e.text??"Example (Click Here)";return(0,c.jsxs)(r,{...e,children:[(0,c.jsx)("span",{children:"\xa0"}),(0,c.jsx)("img",{src:"https://img.shields.io/badge/-"+t+"-informational",alt:"Example (Click Here)"})]})}},67227:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"tutorials/structured_config/static_schema","title":"Static schema with many configs","description":"We have seen that if the name of the config file matches the name of a configs stored in the ConfigStore it will be used to validate the config file automatically.","source":"@site/versioned_docs/version-1.0/tutorials/structured_config/6_static_schema_many_configs.md","sourceDirName":"tutorials/structured_config","slug":"/tutorials/structured_config/static_schema","permalink":"/docs/1.0/tutorials/structured_config/static_schema","draft":false,"unlisted":false,"editUrl":"https://github.com/facebookresearch/hydra/edit/main/website/versioned_docs/version-1.0/tutorials/structured_config/6_static_schema_many_configs.md","tags":[],"version":"1.0","lastUpdatedBy":"zhenbang-2026","lastUpdatedAt":1757109332000,"sidebarPosition":6,"frontMatter":{"id":"static_schema","title":"Static schema with many configs"},"sidebar":"docs","previous":{"title":"Structured config schema","permalink":"/docs/1.0/tutorials/structured_config/schema"},"next":{"title":"Dynamic schema with many configs","permalink":"/docs/1.0/tutorials/structured_config/dynamic_schema"}}');var a=n(74848),i=n(28453),c=n(49595);const o={id:"static_schema",title:"Static schema with many configs"},r=void 0,l={},d=[];function m(e){const t={code:"code",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(c.C,{to:"examples/tutorials/structured_configs/6_static_schema_many_configs"}),"\n",(0,a.jsxs)(t.p,{children:["We have seen that if the name of the config file matches the name of a configs stored in the ",(0,a.jsx)(t.code,{children:"ConfigStore"})," it will be used to validate the config file automatically.\nThis is useful if there is a one-to-one mapping between the Structured Configs and the YAML files.\nSuch convenient mapping does not exist when we have many config files and just one schema."]}),"\n",(0,a.jsx)(t.p,{children:"If the config has a static structure, You can define it using Structured Configs.\nAny config merged into this config structure will be validated against the schema you define."}),"\n",(0,a.jsxs)("div",{className:"row",children:[(0,a.jsx)("div",{className:"col col--6",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:'@dataclass\nclass DBConfig:\n    driver: str = MISSING\n    host: str = MISSING\n    user: str = MISSING\n    password: str = MISSING\n\n@dataclass\nclass Config:\n    db: DBConfig = MISSING\n\ncs = ConfigStore.instance()\ncs.store(name="config", node=Config)\n\n@hydra.main(config_path="conf", \n            config_name="config")\ndef my_app(cfg: Config) -> None:\n    print(OmegaConf.to_yaml(cfg))\n\nif __name__ == "__main__":\n    my_app()\n\n\n\n'})})}),(0,a.jsxs)("div",{className:"col  col--6",children:[(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-text",metastring:'title="Config directory"',children:"\u251c\u2500\u2500 config.yaml\n\u2514\u2500\u2500 db\n    \u251c\u2500\u2500 prod.yaml\n    \u251c\u2500\u2500 qa.yaml\n    \u2514\u2500\u2500 staging.yaml\n"})}),(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-yaml",metastring:'title="config.yaml"',children:"defaults:\n  - db: staging\n"})}),(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-yaml",metastring:'title="db/staging.yaml"',children:"# @package _group_\ndriver: mysql\nhost: mysql001.staging\nuser: root\npassword: root\n"})})]})]}),"\n",(0,a.jsxs)(t.p,{children:["In the above example, the 3 yaml files has the structure compatible with the ",(0,a.jsx)(t.code,{children:"Config"})," dataclass.\nYou can have as many such configs as you want."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-yaml",metastring:'title="Output"',children:"$ python my_app.py db=prod\ndb:\n  driver: mysql\n  host: mysql001.prod\n  user: root\n  password: '1234'\n"})})]})}function u(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(m,{...e})}):m(e)}}}]);
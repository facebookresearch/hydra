"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8976],{28453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>s});var r=i(96540);const o={},t=r.createContext(o);function a(e){const n=r.useContext(t);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),r.createElement(t.Provider,{value:n},e.children)}},40949:e=>{e.exports=JSON.parse('{"permalink":"/blog/2021/06/13/Hydra_1.1","source":"@site/blog/2021-06-13-Hydra_1.1.md","title":"Hydra 1.1","description":"After many months and a lot of hard work by many people, Hydra 1.1 is finally out!","date":"2021-06-13T00:00:00.000Z","tags":[{"inline":true,"label":"Hydra","permalink":"/blog/tags/hydra"},{"inline":true,"label":"Release","permalink":"/blog/tags/release"}],"readingTime":3.79,"hasTruncateMarker":true,"authors":[{"name":"Omry Yadan","title":"Creator of Hydra","url":"https://github.com/omry","imageURL":"https://graph.facebook.com/733244046/picture/?height=200&width=200","key":null,"page":null}],"frontMatter":{"title":"Hydra 1.1","author":"Omry Yadan","author_title":"Creator of Hydra","author_url":"https://github.com/omry","author_image_url":"https://graph.facebook.com/733244046/picture/?height=200&width=200","tags":["Hydra","Release"],"image":"/img/Hydra-Readme-logo2.svg"},"unlisted":false,"prevItem":{"title":"Hydra 1.2","permalink":"/blog/2022/05/18/Hydra_1.2"},"nextItem":{"title":"Hydra Ray Launcher","permalink":"/blog/2020/12/22/Hydra_Ray_Launcher"}}')},65031:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>c});var r=i(40949),o=i(74848),t=i(28453);const a={title:"Hydra 1.1",author:"Omry Yadan",author_title:"Creator of Hydra",author_url:"https://github.com/omry",author_image_url:"https://graph.facebook.com/733244046/picture/?height=200&width=200",tags:["Hydra","Release"],image:"/img/Hydra-Readme-logo2.svg"},s=void 0,l={authorsImageUrls:[void 0]},c=[{value:"Major new features in Hydra 1.1",id:"major-new-features-in-hydra-11",level:3},{value:"More powerful config composition",id:"more-powerful-config-composition",level:3},{value:"Object instantiation enhancements",id:"object-instantiation-enhancements",level:3},{value:"Hydra callbacks",id:"hydra-callbacks",level:3},{value:"OmegaConf 2.1 highlights",id:"omegaconf-21-highlights",level:3},{value:"Relative interpolations",id:"relative-interpolations",level:4},{value:"Nested interpolations",id:"nested-interpolations",level:4},{value:"More powerful custom resolvers",id:"more-powerful-custom-resolvers",level:4},{value:"Other notable improvements",id:"other-notable-improvements",level:3},{value:"Migrating from 1.0",id:"migrating-from-10",level:3}];function d(e){const n={a:"a",br:"br",code:"code",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)("p",{align:"center",children:(0,o.jsx)("img",{src:"/img/Hydra-Readme-logo2.svg",alt:"logo",width:"70%"})}),"\n",(0,o.jsxs)(n.p,{children:["After many months and a lot of hard work by many people, Hydra 1.1 is finally out!",(0,o.jsx)(n.br,{}),"\n","Hydra 1.1 comes with OmegaConf 2.1, which has its own share of awesome new features."]}),"\n",(0,o.jsx)(n.p,{children:"This blog post highlights some of the most prominent features, check the release notes for a complete list of changes:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Hydra 1.1 ",(0,o.jsx)(n.a,{href:"https://github.com/facebookresearch/hydra/releases/tag/v1.1.0",children:"release notes"})]}),"\n",(0,o.jsxs)(n.li,{children:["OmegaConf 2.1 ",(0,o.jsx)(n.a,{href:"https://github.com/omry/omegaconf/releases/tag/v2.1.0",children:"release notes"})]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"major-new-features-in-hydra-11",children:"Major new features in Hydra 1.1"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["More powerful config composition","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Every config can now have a Defaults List"}),"\n",(0,o.jsxs)(n.li,{children:["Composition order of current config can be controlled via the ",(0,o.jsx)(n.code,{children:"_self_"})," keyword in the Defaults List"]}),"\n",(0,o.jsx)(n.li,{children:"Support for composing multiple configs from the same config group"}),"\n",(0,o.jsx)(n.li,{children:"Support for configuring the config search path from the primary config"}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.li,{children:"Recursive instantiation"}),"\n",(0,o.jsx)(n.li,{children:"Experimental callbacks support"}),"\n",(0,o.jsxs)(n.li,{children:["OmegaConf 2.1:","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Relative interpolations"}),"\n",(0,o.jsx)(n.li,{children:"New OmegaConf interpolation grammar supporting nested interpolations and much more"}),"\n",(0,o.jsx)(n.li,{children:"More powerful custom resolvers"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"more-powerful-config-composition",children:"More powerful config composition"}),"\n",(0,o.jsxs)(n.p,{children:["Config composition is the key area of improvement in Hydra 1.1.",(0,o.jsx)(n.br,{}),"\n","The biggest change is support for a Defaults List in any config, and not just the primary config."]}),"\n",(0,o.jsx)(n.p,{children:"This enables many new capabilities:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:'Any config can now "extend" other configs. This enables config files to be associated with a Structured Config schema and to extend other config files'}),"\n",(0,o.jsx)(n.li,{children:'A top level "experiment config" can now override the Defaults List as well as config values'}),"\n",(0,o.jsx)(n.li,{children:"Complex frameworks can now have their own Defaults List, reducing boilerplate"}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["Other related changes include the ability to change the order a config is composed relative to config in its Defaults List by\nadding ",(0,o.jsx)(n.code,{children:"_self_"})," to the Defaults List and the ability to use multiple configs from the same config group."]}),"\n",(0,o.jsx)(n.p,{children:"Learn more:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"/docs/advanced/defaults_list",children:"The Defaults List"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"/docs/patterns/extending_configs",children:"Extending configs"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"/docs/tutorials/structured_config/schema",children:"Structured Configs Schema"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"/docs/patterns/configuring_experiments",children:"Configuring Experiments"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"/docs/patterns/select_multiple_configs_from_config_group",children:"Select multiple configs from config group"})}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"object-instantiation-enhancements",children:"Object instantiation enhancements"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"hydra.utils.instantiate()"})," now instantiates nested objects recursively."]}),"\n",(0,o.jsx)(n.p,{children:"Other enhancements include:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Support for positional arguments via the ",(0,o.jsx)(n.code,{children:"_args_"})," config key"]}),"\n",(0,o.jsxs)(n.li,{children:["Support for parameter conversion strategy was added via the ",(0,o.jsx)(n.code,{children:"_convert_"})," config key"]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["Learn more ",(0,o.jsx)(n.a,{href:"/docs/advanced/instantiate_objects/overview",children:"here"}),"."]}),"\n",(0,o.jsx)(n.h3,{id:"hydra-callbacks",children:"Hydra callbacks"}),"\n",(0,o.jsx)(n.p,{children:"A new experimental mechanism for user defined callbacks was added.\nCallbacks enable user code to be executed automatically at various points in the lifecycle of your application.\nThere are many potential use cases for this, for example automatic registration with your\nfavorite experiment-tracking service."}),"\n",(0,o.jsxs)(n.p,{children:["Learn more ",(0,o.jsx)(n.a,{href:"/docs/experimental/callbacks",children:"here"}),"."]}),"\n",(0,o.jsx)(n.h3,{id:"omegaconf-21-highlights",children:"OmegaConf 2.1 highlights"}),"\n",(0,o.jsx)(n.p,{children:"OmegaConf 2.1 includes many enhancements, bug fixes, and performance improvements."}),"\n",(0,o.jsx)(n.h4,{id:"relative-interpolations",children:"Relative interpolations"}),"\n",(0,o.jsx)(n.p,{children:"Relative interpolations enable accessing a config node relative to the node defining the interpolation:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"x: 10\nb:\n  y: 20\n  a: {x}    # 10, absolute interpolation\n  b: ${.y}  # 20, relative interpolation\n  c: ${..x} # 10, relative interpolation\n"})}),"\n",(0,o.jsx)(n.h4,{id:"nested-interpolations",children:"Nested interpolations"}),"\n",(0,o.jsxs)(n.p,{children:["OmegaConf 2.1 adds a new interpolation grammar supporting more sophisticated usage of interpolations.",(0,o.jsx)(n.br,{}),"\n","In the following example, the default value to use if the environment variable ",(0,o.jsx)(n.code,{children:"DB_USER"})," does not exist is defined in the ",(0,o.jsx)(n.code,{children:"default_user"})," config node:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"default_user: root\ndb_user: ${oc.env:DB_USER,${default_user}}\n"})}),"\n",(0,o.jsx)(n.h4,{id:"more-powerful-custom-resolvers",children:"More powerful custom resolvers"}),"\n",(0,o.jsxs)(n.p,{children:["OmegaConf custom resolvers can now access parent config node or the config root by defining\nkeyword parameters named ",(0,o.jsx)(n.code,{children:"_parent_"})," and ",(0,o.jsx)(n.code,{children:"_root_"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["In the example below, we use ",(0,o.jsx)(n.code,{children:"_parent_"})," to implement a sum function that defaults to 0 if the node does not exist:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'def sum(a, b, *, _parent_):\n  return _parent_.get(a, 0) + _parent_.get(b, 0)\n\nOmegaConf.register_new_resolver("sum", sum)\ncfg = OmegaConf.create({\n  "node": {\n    "a": 1,\n    "b": 2,\n    "a_plus_b": "${sum:a,b}",\n    "a_plus_z": "${sum:a,z}",\n  },\n})\nprint(cfg.node.a_plus_b)  # 3\nprint(cfg.node.a_plus_z)  # 1\n'})}),"\n",(0,o.jsx)(n.h3,{id:"other-notable-improvements",children:"Other notable improvements"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Config composition, especially for large configs - is significantly faster."}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"OmegaConf.resolve(cfg)"})," can be used for in-place interpolation resolution on a config object"]}),"\n",(0,o.jsx)(n.li,{children:"Improved compatibility of OmegaConf config objects with plain dict and list"}),"\n",(0,o.jsxs)(n.li,{children:["Support for bracketed style (",(0,o.jsx)(n.code,{children:"foo.bar"})," is equivalent to ",(0,o.jsx)(n.code,{children:"foo[bar]"}),"), this covers interpolations and ",(0,o.jsx)(n.code,{children:"OmegaConf.{update, select}"})," usage"]}),"\n",(0,o.jsx)(n.li,{children:"PyDev.Debugger integration for easier debugging of config objects in PyCharm and VSCode"}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"migrating-from-10",children:"Migrating from 1.0"}),"\n",(0,o.jsxs)(n.p,{children:["Hydra 1.1 is a major release. For most people, migrating from 1.0 to 1.1 will be smooth.\nHowever, there are some breaking changes listed in the release notes of OmegaConf 2.1 and Hydra 1.1.\nMost changes come with a deprecation warning pointing to a specific migration guide page.\nPlease feel free to reach out for ",(0,o.jsx)(n.a,{href:"/docs/intro#community",children:"help"})," if you see a change in behavior that is not mentioned in the release notes."]}),"\n",(0,o.jsx)(n.p,{children:"That's it for now, take Hydra 1.1 for a spin!"})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}}}]);
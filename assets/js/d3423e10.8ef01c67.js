"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5705],{5474:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>u,frontMatter:()=>l,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"development/style_guide","title":"Style Guide","description":"The code need to pass verification by the following tools:","source":"@site/versioned_docs/version-1.2/development/style_guide.md","sourceDirName":"development","slug":"/development/style_guide","permalink":"/docs/1.2/development/style_guide","draft":false,"unlisted":false,"editUrl":"https://github.com/facebookresearch/hydra/edit/main/website/versioned_docs/version-1.2/development/style_guide.md","tags":[],"version":"1.2","lastUpdatedBy":"Ryan Soklaski","lastUpdatedAt":1761332619000,"frontMatter":{"id":"style_guide","title":"Style Guide","sidebar_label":"Style Guide"},"sidebar":"docs","previous":{"title":"Testing","permalink":"/docs/1.2/development/testing"},"next":{"title":"Documentation","permalink":"/docs/1.2/development/documentation"}}');var s=n(74848),o=n(28453);const l={id:"style_guide",title:"Style Guide",sidebar_label:"Style Guide"},r=void 0,c={},d=[];function a(e){const t={code:"code",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.p,{children:"The code need to pass verification by the following tools:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"black ."})," : Automatic code formatting for Python"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"flake8"})," : PEP8 compliance checker for Python, this includes copyright header verification"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"isort ."})," : Ensure imports are sorted properly"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"mypy --strict ."})," : Ensures code passes strict type checking"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"yamllint ."})," : Ensures that yaml files are syntactically correct and properly indented."]}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"The easiest way to run the required verifications is:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"nox -s lint"})," : for the Hydra core"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"nox -s lint_plugins"})," : for the included plugins"]}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"isort is a bit tricky to run for plugins. the best way to get it to sort the plugins imports is with the FIX environment\nvariable:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"$ FIX=1 nox -s lint_plugins\n"})}),"\n",(0,s.jsxs)(t.p,{children:["It is also recommended that you install pre-commit hooks (use ",(0,s.jsx)(t.code,{children:"pre-commit install"}),").\npre-commit will execute some of the above tests when you commit your code locally.\nYou can disable it by appending ",(0,s.jsx)(t.code,{children:"-n"})," to your commit command: ",(0,s.jsx)(t.code,{children:"git commit -m wip -n"})]}),"\n",(0,s.jsx)(t.p,{children:"Pull requests that do not lint will fail the automated testing."})]})}function u(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>l,x:()=>r});var i=n(96540);const s={},o=i.createContext(s);function l(e){const t=i.useContext(o);return i.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),i.createElement(o.Provider,{value:t},e.children)}}}]);
"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5025],{28453:(e,t,n)=>{n.d(t,{R:()=>c,x:()=>s});var i=n(96540);const r={},o=i.createContext(r);function c(e){const t=i.useContext(o);return i.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),i.createElement(o.Provider,{value:t},e.children)}},49595:(e,t,n)=>{n.d(t,{A:()=>a,C:()=>l});n(96540);var i=n(28774),r=n(44586),o=n(48295),c=n(74848);function s(e){const t=(0,o.ir)();return(0,r.default)().siteConfig.customFields.githubLinkVersionToBaseUrl[t?.name??"current"]+e}function a(e){return(0,c.jsx)(i.default,{...e,to:s(e.to),target:"_blank"})}function l(e){const t=e.text??"Example (Click Here)";return(0,c.jsxs)(a,{...e,children:[(0,c.jsx)("span",{children:"\xa0"}),(0,c.jsx)("img",{src:"https://img.shields.io/badge/-"+t+"-informational",alt:"Example (Click Here)"})]})}},78586:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>s,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"tutorials/structured_config/minimal_example","title":"Minimal example","description":"There are four key elements in this example:","source":"@site/versioned_docs/version-1.0/tutorials/structured_config/1_minimal_example.md","sourceDirName":"tutorials/structured_config","slug":"/tutorials/structured_config/minimal_example","permalink":"/docs/1.0/tutorials/structured_config/minimal_example","draft":false,"unlisted":false,"editUrl":"https://github.com/facebookresearch/hydra/edit/main/website/versioned_docs/version-1.0/tutorials/structured_config/1_minimal_example.md","tags":[],"version":"1.0","lastUpdatedBy":"jesszzzz","lastUpdatedAt":1754330894000,"sidebarPosition":1,"frontMatter":{"id":"minimal_example","title":"Minimal example"},"sidebar":"docs","previous":{"title":"Introduction to Structured Configs","permalink":"/docs/1.0/tutorials/structured_config/intro"},"next":{"title":"A hierarchical static configuration","permalink":"/docs/1.0/tutorials/structured_config/hierarchical_static_config"}}');var r=n(74848),o=n(28453),c=n(49595);const s={id:"minimal_example",title:"Minimal example"},a=void 0,l={},d=[{value:"Duck-typing enables static type checking",id:"duck-typing-enables-static-type-checking",level:3},{value:"Structured Configs enable Hydra to catch type errors at runtime",id:"structured-configs-enable-hydra-to-catch-type-errors-at-runtime",level:3},{value:"Duck typing",id:"duck-typing",level:2}];function p(e){const t={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(c.C,{to:"examples/tutorials/structured_configs/1_minimal"}),"\n",(0,r.jsx)(t.p,{children:"There are four key elements in this example:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["A ",(0,r.jsx)(t.code,{children:"@dataclass"})," describes the application's configuration"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"ConfigStore"})," manages the Structured Config"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"cfg"})," is ",(0,r.jsx)(t.code,{children:"duck typed"})," as a ",(0,r.jsx)(t.code,{children:"MySQLConfig"})," instead of a ",(0,r.jsx)(t.code,{children:"DictConfig"})]}),"\n",(0,r.jsx)(t.li,{children:"There is a subtle typo in the code below, can you spot it?"}),"\n"]}),"\n",(0,r.jsxs)(t.p,{children:["In this example, the config node stored in the ",(0,r.jsx)(t.code,{children:"ConfigStore"})," replaces the traditional ",(0,r.jsx)(t.code,{children:"config.yaml"})," file."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",metastring:'title="my_app_type_error.py" {18}',children:'from dataclasses import dataclass\n\nimport hydra\nfrom hydra.core.config_store import ConfigStore\n\n@dataclass\nclass MySQLConfig:\n    host: str = "localhost"\n    port: int = 3306\n\ncs = ConfigStore.instance()\n# Registering the Config class with the name \'config\'.\ncs.store(name="config", node=MySQLConfig)\n\n@hydra.main(config_name="config")\ndef my_app(cfg: MySQLConfig) -> None:\n    # pork should be port!\n    if cfg.pork == 80:\n        print("Is this a webserver?!")\n\nif __name__ == "__main__":\n    my_app()\n'})}),"\n",(0,r.jsx)(t.h3,{id:"duck-typing-enables-static-type-checking",children:"Duck-typing enables static type checking"}),"\n",(0,r.jsxs)(t.p,{children:["Duck-typing the config object as ",(0,r.jsx)(t.code,{children:"MySQLConfig"})," enables static type checkers like ",(0,r.jsx)(t.code,{children:"mypy"})," to catch\ntype errors before you run your code:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-text",metastring:'title="$ mypy my_app_type_error.py" ',children:'my_app_type_error.py:22: error: "MySQLConfig" has no attribute "pork"\nFound 1 error in 1 file (checked 1 source file)\n'})}),"\n",(0,r.jsx)(t.h3,{id:"structured-configs-enable-hydra-to-catch-type-errors-at-runtime",children:"Structured Configs enable Hydra to catch type errors at runtime"}),"\n",(0,r.jsxs)(t.p,{children:["If you forget to run ",(0,r.jsx)(t.code,{children:"mypy"}),", Hydra will report the error at runtime:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-text",metastring:'title="$ python my_app_type_error.py"',children:"Traceback (most recent call last):\n  File \"my_app_type_error.py\", line 22, in my_app\n    if cfg.pork == 80:\nomegaconf.errors.ConfigAttributeError: Key 'pork' not in 'MySQLConfig'\n        full_key: pork\n        reference_type=Optional[MySQLConfig]\n        object_type=MySQLConfig\n\nSet the environment variable HYDRA_FULL_ERROR=1 for a complete stack trace.\n"})}),"\n",(0,r.jsx)(t.p,{children:"Hydra will also catch typos, or type errors in the command line:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"$ python my_app_type_error.py port=fail\nError merging override port=fail\nValue 'fail' could not be converted to Integer\n        full_key: port\n        reference_type=Optional[MySQLConfig]\n        object_type=MySQLConfig\n"})}),"\n",(0,r.jsx)(t.p,{children:"We will see additional types of runtime errors that Hydra can catch later in this tutorial. Such as:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"Trying to read or write a non existent field in your config object"}),"\n",(0,r.jsx)(t.li,{children:"Assigning a value that is incompatible with the declared type"}),"\n",(0,r.jsxs)(t.li,{children:["Attempting to modify a ",(0,r.jsx)(t.a,{href:"https://omegaconf.readthedocs.io/en/latest/structured_config.html#frozen",children:"frozen config"})]}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"duck-typing",children:"Duck typing"}),"\n",(0,r.jsxs)(t.p,{children:["In the example above ",(0,r.jsx)(t.code,{children:"cfg"})," is duck typed as ",(0,r.jsx)(t.code,{children:"MySQLConfig"}),".\nIt is actually an instance of ",(0,r.jsx)(t.code,{children:"DictConfig"}),". The duck typing enables static type checking by tools like Mypy or PyCharm.\nThis reduces development time by catching coding errors before you run your application."]}),"\n",(0,r.jsxs)(t.p,{children:["The name ",(0,r.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Duck_typing",children:"Duck typing"}),' comes from the phrase "If it walks like a duck, swims like a duck, and quacks like a duck, then it probably is a duck".\nIt can be useful when you care about the methods or attributes of an object, not the actual type of the object.']})]})}function u(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}}}]);
"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[126],{28453:(e,r,o)=>{o.d(r,{R:()=>d,x:()=>a});var t=o(96540);const n={},i=t.createContext(n);function d(e){const r=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function a(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:d(e.components),t.createElement(i.Provider,{value:r},e.children)}},87263:(e,r,o)=>{o.r(r),o.d(r,{assets:()=>s,contentTitle:()=>a,default:()=>u,frontMatter:()=>d,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"tutorial/working_directory","title":"Output/Working directory","description":"Hydra solves the problem of your needing to specify a new output directory for each run, by","source":"@site/versioned_docs/version-0.11/tutorial/8_working_directory.md","sourceDirName":"tutorial","slug":"/tutorial/working_directory","permalink":"/docs/0.11/tutorial/working_directory","draft":false,"unlisted":false,"editUrl":"https://github.com/facebookresearch/hydra/edit/main/website/versioned_docs/version-0.11/tutorial/8_working_directory.md","tags":[],"version":"0.11","lastUpdatedBy":"zhenbang-2026","lastUpdatedAt":1756937906000,"sidebarPosition":8,"frontMatter":{"id":"working_directory","title":"Output/Working directory","sidebar_label":"Output/Working directory"},"sidebar":"docs","previous":{"title":"Tab completion","permalink":"/docs/0.11/tutorial/tab_completion"},"next":{"title":"Logging","permalink":"/docs/0.11/tutorial/logging"}}');var n=o(74848),i=o(28453);const d={id:"working_directory",title:"Output/Working directory",sidebar_label:"Output/Working directory"},a=void 0,s={},c=[{value:"Original working directory",id:"original-working-directory",level:3}];function l(e){const r={a:"a",code:"code",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(r.p,{children:"Hydra solves the problem of your needing to specify a new output directory for each run, by\ncreating a directory for each run and executing your code within that directory."}),"\n",(0,n.jsx)(r.p,{children:"The working directory is used to:"}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsx)(r.li,{children:"Store the output for the application (For example, a database dump file)"}),"\n",(0,n.jsx)(r.li,{children:"Store the Hydra output for the run (Configuration, Logs etc)"}),"\n"]}),"\n",(0,n.jsx)(r.p,{children:"Every time you run the app, a new working directory is automatically created:"}),"\n",(0,n.jsxs)(r.p,{children:["Python file: ",(0,n.jsx)(r.code,{children:"my_app.py"})]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-python",children:'import os\n\n@hydra.main()\ndef my_app(_cfg):\n    print("Working directory : {}".format(os.getcwd()))\n\n$ python my_app.py\nWorking directory : /home/omry/dev/hydra/outputs/2019-09-25/15-16-17\n\n$ python my_app.py\nWorking directory : /home/omry/dev/hydra/outputs/2019-09-25/15-16-19\n'})}),"\n",(0,n.jsx)(r.p,{children:"Let's take a look at one of those working directories:"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-text",children:"$ tree outputs/2019-09-25/15-16-17\noutputs/2019-09-25/15-16-17\n\u251c\u2500\u2500 .hydra\n\u2502   \u251c\u2500\u2500 config.yaml\n\u2502   \u251c\u2500\u2500 hydra.yaml\n\u2502   \u2514\u2500\u2500 overrides.yaml\n\u2514\u2500\u2500 my_app.log\n"})}),"\n",(0,n.jsxs)(r.p,{children:["We have the Hydra output directory (",(0,n.jsx)(r.code,{children:".hydra"})," by default) and the application log file.\nInside the configuration output directory we have:"]}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.code,{children:"config.yaml"}),": A dump of the user specified configuration"]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.code,{children:"hydra.yaml"}),": A dump of the Hydra configuration"]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.code,{children:"overrides.yaml"}),": The command line overrides used"]}),"\n"]}),"\n",(0,n.jsx)(r.p,{children:"And in the main output directory:"}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.code,{children:"my_app.log"}),": A log file created for this run"]}),"\n"]}),"\n",(0,n.jsx)(r.h3,{id:"original-working-directory",children:"Original working directory"}),"\n",(0,n.jsx)(r.p,{children:"You can still access the original working directory if you need to:"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-python",children:'import os\nimport hydra\nfrom hydra import utils\n\n@hydra.main()\ndef my_app(_cfg):\n    print("Current working directory  : {}".format(os.getcwd()))\n    print("Original working directory : {}".format(utils.get_original_cwd()))\n    print("to_absolute_path(\'foo\')    : {}".format(utils.to_absolute_path("foo")))\n    print("to_absolute_path(\'/foo\')   : {}".format(utils.to_absolute_path("/foo")))\n\n\n$ python examples/tutorial/8_working_directory/original_cwd.py\nCurrent working directory  : /Users/omry/dev/hydra/outputs/2019-10-23/10-53-03\nOriginal working directory : /Users/omry/dev/hydra\nto_absolute_path(\'foo\')    : /Users/omry/dev/hydra/foo\nto_absolute_path(\'/foo\')   : /foo\n'})}),"\n",(0,n.jsxs)(r.p,{children:["Working directory can be ",(0,n.jsx)(r.a,{href:"/docs/0.11/configure_hydra/workdir",children:"customized"}),"."]})]})}function u(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}}}]);
"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9608],{28453:(e,n,o)=>{o.d(n,{R:()=>s,x:()=>l});var i=o(96540);const t={},r=i.createContext(t);function s(e){const n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),i.createElement(r.Provider,{value:n},e.children)}},64770:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>d,frontMatter:()=>s,metadata:()=>i,toc:()=>g});const i=JSON.parse('{"id":"configure_hydra/logging","title":"Customizing logging","description":"Hydra is configuring Python standard logging library with the dictConfig method. You can learn more about it here.","source":"@site/versioned_docs/version-0.11/configure_hydra/logging.md","sourceDirName":"configure_hydra","slug":"/configure_hydra/logging","permalink":"/docs/0.11/configure_hydra/logging","draft":false,"unlisted":false,"editUrl":"https://github.com/facebookresearch/hydra/edit/main/website/versioned_docs/version-0.11/configure_hydra/logging.md","tags":[],"version":"0.11","lastUpdatedBy":"zhenbang-2026","lastUpdatedAt":1757109332000,"frontMatter":{"id":"logging","title":"Customizing logging","sidebar_label":"Customizing logging"},"sidebar":"docs","previous":{"title":"Introduction","permalink":"/docs/0.11/configure_hydra/intro"},"next":{"title":"Customizing working directory pattern","permalink":"/docs/0.11/configure_hydra/workdir"}}');var t=o(74848),r=o(28453);const s={id:"logging",title:"Customizing logging",sidebar_label:"Customizing logging"},l=void 0,a={},g=[];function c(e){const n={a:"a",code:"code",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["Hydra is configuring Python standard logging library with the dictConfig method. You can learn more about it ",(0,t.jsx)(n.a,{href:"https://docs.python.org/3/howto/logging.html",children:"here"}),".\nThere are two logging configurations, one for Hydra itself and one for the executed jobs."]}),"\n",(0,t.jsx)(n.p,{children:"This example demonstrates how to to customize the logging behavior of your Hydra app, by making the following changes\nto the default logging behavior:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Outputs only to stdout (no log file)"}),"\n",(0,t.jsx)(n.li,{children:"Output a simpler log line pattern"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Project structure:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:"$ tree\n\u251c\u2500\u2500 conf\n\u2502\xa0\xa0 \u251c\u2500\u2500 config.yaml\n\u2502\xa0\xa0 \u2514\u2500\u2500 hydra\n\u2502\xa0\xa0     \u2514\u2500\u2500 job_logging\n\u2502\xa0\xa0         \u2514\u2500\u2500 custom.yaml\n\u2514\u2500\u2500 main.py\n"})}),"\n",(0,t.jsx)(n.p,{children:"config.yaml defaults the application to the custom logging."}),"\n",(0,t.jsxs)(n.p,{children:["Config file: ",(0,t.jsx)(n.code,{children:"config.yaml"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"defaults:\n  - hydra/job_logging : custom\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Config file: ",(0,t.jsx)(n.code,{children:"hydra/job_logging/custom.yaml"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"hydra:\n  job_logging:\n    formatters:\n      simple:\n        format: '[%(levelname)s] - %(message)s'\n    root:\n      handlers: [console]\n"})}),"\n",(0,t.jsx)(n.p,{children:"This is what the the default logging looks like:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"$ python main.py hydra/job_logging=default\n[2019-09-26 18:58:05,477][__main__][INFO] - Info level message\n"})}),"\n",(0,t.jsx)(n.p,{children:"And this is what the custom logging looks like:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"$ python main.py\n[INFO] - Info level message\n"})})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}}}]);
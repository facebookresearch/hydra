"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2231],{12836:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>h,frontMatter:()=>r,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"tutorials/structured_config/schema","title":"Structured Config schema","description":"We have seen how to use Structured Configs as configuration, but they can also be used as a schema (i.e. validating configuration files).","source":"@site/docs/tutorials/structured_config/5_schema.md","sourceDirName":"tutorials/structured_config","slug":"/tutorials/structured_config/schema","permalink":"/docs/tutorials/structured_config/schema","draft":false,"unlisted":false,"editUrl":"https://github.com/facebookresearch/hydra/edit/main/website/docs/tutorials/structured_config/5_schema.md","tags":[],"version":"current","lastUpdatedBy":"jesszzzz","lastUpdatedAt":1755026473000,"sidebarPosition":5,"frontMatter":{"id":"schema","title":"Structured Config schema"},"sidebar":"docs","previous":{"title":"Defaults List","permalink":"/docs/tutorials/structured_config/defaults"},"next":{"title":"Extending Configs","permalink":"/docs/patterns/extending_configs"}}');var t=s(74848),i=s(28453),o=s(49595);const r={id:"schema",title:"Structured Config schema"},c=void 0,d={},l=[{value:"Validating against a schema in the same config group",id:"validating-against-a-schema-in-the-same-config-group",level:3},{value:"Validating against a schema from a different config group",id:"validating-against-a-schema-from-a-different-config-group",level:3},{value:"A Note about composition order",id:"a-note-about-composition-order",level:3}];function f(e){const n={a:"a",code:"code",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components},{Details:s}=n;return s||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["We have seen how to use Structured Configs as configuration, but they can also be used as a schema (i.e. validating configuration files).\nTo achieve this, we will follow the common pattern of ",(0,t.jsx)(n.a,{href:"/docs/patterns/extending_configs",children:"Extending Configs"})," - but instead of extending another config file,\nwe will extend a Structured Config."]}),"\n",(0,t.jsxs)(n.p,{children:["This page shows how to validate the config files ",(0,t.jsx)(n.code,{children:"config.yaml"}),", ",(0,t.jsx)(n.code,{children:"db/mysql.yaml"})," and ",(0,t.jsx)(n.code,{children:"db/postgresql.yaml"}),"\nagainst a Structured Config schema."]}),"\n",(0,t.jsx)(n.h3,{id:"validating-against-a-schema-in-the-same-config-group",children:"Validating against a schema in the same config group"}),"\n",(0,t.jsx)(o.C,{to:"examples/tutorials/structured_configs/5.1_structured_config_schema_same_config_group"}),"\n",(0,t.jsx)(n.p,{children:"Given the config directory structure:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:"conf/\n\u251c\u2500\u2500 config.yaml\n\u2514\u2500\u2500 db\n    \u251c\u2500\u2500 mysql.yaml\n    \u2514\u2500\u2500 postgresql.yaml\n"})}),"\n",(0,t.jsxs)(n.p,{children:["We will add Structured Config schema for each of the config files above and store in the\nConfig Store as ",(0,t.jsx)(n.code,{children:"base_config"}),", ",(0,t.jsx)(n.code,{children:"db/base_mysql"})," and ",(0,t.jsx)(n.code,{children:"db/base_postgresql"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"Then, we will use the Defaults List in each config to specify its base config as follows:"}),"\n",(0,t.jsxs)("div",{className:"row",children:[(0,t.jsx)("div",{className:"col col--4",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",metastring:'title="config.yaml" {2}',children:"defaults:\n  - base_config\n  - db: mysql\n  # See composition order note\n  - _self_\n\ndebug: true\n"})})}),(0,t.jsx)("div",{className:"col col--4",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",metastring:'title="db/mysql.yaml" {2}',children:"defaults:\n  - base_mysql\n\nuser: omry\npassword: secret\n\n\n"})})}),(0,t.jsx)("div",{className:"col col--4",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",metastring:'title="db/postgresql.yaml" {2}',children:"defaults:\n  - base_postgresql\n\nuser: postgres_user\npassword: drowssap\n\n\n"})})})]}),"\n",(0,t.jsxs)(n.p,{children:["One difference in the source code is that we have removed the Defaults List from the ",(0,t.jsx)(n.code,{children:"Config"})," dataclass.\nThe primary Defaults List will come from ",(0,t.jsx)(n.code,{children:"config.yaml"}),"."]}),"\n",(0,t.jsxs)(s,{children:[(0,t.jsx)("summary",{children:"my_app.py (Click to expand)"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",metastring:"{28-30}",children:'from dataclasses import dataclass\n\nimport hydra\nfrom hydra.core.config_store import ConfigStore\n\n@dataclass\nclass DBConfig:\n    driver: str = MISSING\n    host: str = "localhost"\n    port: int = MISSING\n\n@dataclass\nclass MySQLConfig(DBConfig):\n    driver: str = "mysql"\n    port: int = 3306\n    user: str = MISSING\n    password: str = MISSING\n\n@dataclass\nclass PostGreSQLConfig(DBConfig):\n    driver: str = "postgresql"\n    user: str = MISSING\n    port: int = 5432\n    password: str = MISSING\n    timeout: int = 10\n\n@dataclass\nclass Config:\n    db: DBConfig = MISSING\n    debug: bool = False\n\ncs = ConfigStore.instance()\ncs.store(name="base_config", node=Config)\ncs.store(group="db", name="base_mysql", node=MySQLConfig)\ncs.store(group="db", name="base_postgresql", node=PostGreSQLConfig)\n\n@hydra.main(version_base=None, config_path="conf", config_name="config")\ndef my_app(cfg: Config) -> None:\n    print(OmegaConf.to_yaml(cfg))\n\nif __name__ == "__main__":\n    my_app()\n'})})]}),"\n",(0,t.jsx)("br",{}),"\n",(0,t.jsx)(n.p,{children:"When Hydra composes the final config object it will use the config schemas as specified in the Default Lists.\nLike before, Hydra will catch user errors in the command line:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"$ python my_app.py db.port=fail\nError merging override db.port=fail\nValue 'fail' could not be converted to Integer\n        full_key: db.port\n        object_type=MySQLConfig\n"})}),"\n",(0,t.jsxs)(s,{children:[(0,t.jsxs)("summary",{children:["Use ",(0,t.jsx)("b",{children:"--info"})," commands to see how a config was composed (",(0,t.jsx)("b",{children:"Expand"}),")"]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:"$ python my_app.py --info defaults-tree\n\nDefaults Tree\n*************\n<root>:\n  hydra/config:\n    hydra/output: default\n    hydra/launcher: basic\n    hydra/sweeper: basic\n    hydra/help: default\n    hydra/hydra_help: default\n    hydra/hydra_logging: default\n    hydra/job_logging: default\n    _self_\n  config:\n    base_config\n    db: mysql:\n      db/base_mysql\n      _self_\n    _self_\n\n$ python my_app.py --info defaults\n\nDefaults List\n*************\n| Config path                 | Package             | _self_ | Parent       |\n------------------------------------------------------------------------------\n| hydra/output/default        | hydra               | False  | hydra/config |\n| hydra/launcher/basic        | hydra.launcher      | False  | hydra/config |\n| hydra/sweeper/basic         | hydra.sweeper       | False  | hydra/config |\n| hydra/help/default          | hydra.help          | False  | hydra/config |\n| hydra/hydra_help/default    | hydra.hydra_help    | False  | hydra/config |\n| hydra/hydra_logging/default | hydra.hydra_logging | False  | hydra/config |\n| hydra/job_logging/default   | hydra.job_logging   | False  | hydra/config |\n| hydra/config                | hydra               | True   | <root>       |\n| base_config                 |                     | False  | config       |\n| db/base_mysql               | db                  | False  | db/mysql     |\n| db/mysql                    | db                  | True   | config       |\n| config                      |                     | True   | <root>       |\n------------------------------------------------------------------------------\n"})})]}),"\n",(0,t.jsx)(n.h3,{id:"validating-against-a-schema-from-a-different-config-group",children:"Validating against a schema from a different config group"}),"\n",(0,t.jsx)(o.C,{to:"examples/tutorials/structured_configs/5.2_structured_config_schema_different_config_group"}),"\n",(0,t.jsx)(n.p,{children:"In the above example, the schema we used was stored in the same config group.\nThis is not always the case, for example - A library might provide schemas in its own config group."}),"\n",(0,t.jsx)(n.p,{children:"Here is a modified version of the example above, where a mock database_lib is providing the schemas\nwe want to validate against."}),"\n",(0,t.jsxs)("div",{className:"row",children:[(0,t.jsx)("div",{className:"col col--6",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",metastring:'title="my_app.py"',children:'from dataclasses import dataclass\n\nimport hydra\nfrom hydra.core.config_store import ConfigStore\n\nimport database_lib\n\n\n@dataclass\nclass Config:\n    db: database_lib.DBConfig = MISSING\n    debug: bool = False\n\ncs = ConfigStore.instance()\ncs.store(name="base_config", node=Config)\n\n# database_lib registers its configs\n# in database_lib/db\ndatabase_lib.register_configs()\n\n\n@hydra.main(\n    version_base=None,\n    config_path="conf",\n    config_name="config",\n)\ndef my_app(cfg: Config) -> None:\n    print(OmegaConf.to_yaml(cfg))\n\n\nif __name__ == "__main__":\n    my_app()\n'})})}),(0,t.jsx)("div",{className:"col col--6",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",metastring:'title="database_lib.py" {17,22}',children:'from dataclasses import dataclass\n\nfrom hydra.core.config_store import ConfigStore\n\n@dataclass\nclass DBConfig:\n  ...\n\n@dataclass\nclass MySQLConfig(DBConfig):\n  ...\n\n@dataclass\nclass PostGreSQLConfig(DBConfig):\n  ...\n\n\ndef register_configs() -> None:\n    cs = ConfigStore.instance()\n    cs.store(\n        group="database_lib/db",\n        name="mysql",\n        node=MySQLConfig,\n    )\n    cs.store(\n        group="database_lib/db",\n        name="postgresql",\n        node=PostGreSQLConfig,\n    )\n\n'})})})]}),"\n",(0,t.jsx)(n.p,{children:"The Defaults List entry for the base config is slightly different:"}),"\n",(0,t.jsxs)("div",{className:"row",children:[(0,t.jsx)("div",{className:"col col--6",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",metastring:'title="db/mysql.yaml" {2}',children:"defaults:\n  - /database_lib/db/mysql@_here_\n\nuser: omry\npassword: secret\n"})})}),(0,t.jsx)("div",{className:"col col--6",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",metastring:'title="db/postgresql.yaml" {2}',children:"defaults:\n  - /database_lib/db/postgresql@_here_\n  # See composition order note\n  - _self_\n\nuser: postgres_user\npassword: drowssap\n"})})})]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"We refer to the config with an absolute path because it is outside the subtree of the db config group."}),"\n",(0,t.jsxs)(n.li,{children:["we override the package to ",(0,t.jsx)(n.code,{children:"_here_"})," to ensure that the package of the schema is the same as the package\nof the config it's validating."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"a-note-about-composition-order",children:"A Note about composition order"}),"\n",(0,t.jsxs)(n.p,{children:["By default, Hydra 1.1 appends ",(0,t.jsx)(n.code,{children:"_self_"})," to the end of the Defaults List.\nThis behavior is new in Hydra 1.1 and different from previous Hydra versions. As such Hydra 1.1  issues a warning if ",(0,t.jsx)(n.code,{children:"_self_"})," is not specified ",(0,t.jsx)(n.strong,{children:"in the primary config"}),", asking you to add ",(0,t.jsx)(n.code,{children:"_self_"})," and thus indicate the desired composition order.\nTo address the warning while maintaining the new behavior, append ",(0,t.jsx)(n.code,{children:"_self_"})," to the end of the Defaults List. Note that in some cases it may instead be desirable to add ",(0,t.jsx)(n.code,{children:"_self_"})," directly after the schema and before other Defaults List elements."]}),"\n",(0,t.jsxs)(n.p,{children:["See ",(0,t.jsx)(n.a,{href:"/docs/advanced/defaults_list#composition-order",children:"Composition Order"})," for more information."]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(f,{...e})}):f(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>r});var a=s(96540);const t={},i=a.createContext(t);function o(e){const n=a.useContext(i);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),a.createElement(i.Provider,{value:n},e.children)}},49595:(e,n,s)=>{s.d(n,{A:()=>c,C:()=>d});s(96540);var a=s(28774),t=s(44586),i=s(48295),o=s(74848);function r(e){const n=(0,i.ir)();return(0,t.default)().siteConfig.customFields.githubLinkVersionToBaseUrl[n?.name??"current"]+e}function c(e){return(0,o.jsx)(a.default,{...e,to:r(e.to),target:"_blank"})}function d(e){const n=e.text??"Example (Click Here)";return(0,o.jsxs)(c,{...e,children:[(0,o.jsx)("span",{children:"\xa0"}),(0,o.jsx)("img",{src:"https://img.shields.io/badge/-"+n+"-informational",alt:"Example (Click Here)"})]})}}}]);
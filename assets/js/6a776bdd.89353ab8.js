"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3802],{28453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>a});var s=i(96540);const o={},t=s.createContext(o);function r(e){const n=s.useContext(t);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),s.createElement(t.Provider,{value:n},e.children)}},49595:(e,n,i)=>{i.d(n,{A:()=>c,C:()=>l});i(96540);var s=i(28774),o=i(44586),t=i(48295),r=i(74848);function a(e){const n=(0,t.ir)();return(0,o.default)().siteConfig.customFields.githubLinkVersionToBaseUrl[n?.name??"current"]+e}function c(e){return(0,r.jsx)(s.default,{...e,to:a(e.to),target:"_blank"})}function l(e){const n=e.text??"Example (Click Here)";return(0,r.jsxs)(c,{...e,children:[(0,r.jsx)("span",{children:"\xa0"}),(0,r.jsx)("img",{src:"https://img.shields.io/badge/-"+n+"-informational",alt:"Example (Click Here)"})]})}},90930:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>g,frontMatter:()=>a,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"tutorials/basic/your_first_app/config_groups","title":"Grouping config files","description":"Suppose you want to benchmark your application on each of PostgreSQL and MySQL. To do this, use config groups.","source":"@site/versioned_docs/version-1.2/tutorials/basic/your_first_app/4_config_groups.md","sourceDirName":"tutorials/basic/your_first_app","slug":"/tutorials/basic/your_first_app/config_groups","permalink":"/docs/1.2/tutorials/basic/your_first_app/config_groups","draft":false,"unlisted":false,"editUrl":"https://github.com/facebookresearch/hydra/edit/main/website/versioned_docs/version-1.2/tutorials/basic/your_first_app/4_config_groups.md","tags":[],"version":"1.2","lastUpdatedBy":"Ryan Soklaski","lastUpdatedAt":1761332619000,"sidebarPosition":4,"frontMatter":{"id":"config_groups","title":"Grouping config files"},"sidebar":"docs","previous":{"title":"Using the config object","permalink":"/docs/1.2/tutorials/basic/your_first_app/using_config"},"next":{"title":"Selecting default configs","permalink":"/docs/1.2/tutorials/basic/your_first_app/defaults"}}');var o=i(74848),t=i(28453),r=i(49595);const a={id:"config_groups",title:"Grouping config files"},c=void 0,l={},d=[{value:"Creating config groups",id:"creating-config-groups",level:3},{value:"Using config groups",id:"using-config-groups",level:3},{value:"Advanced topics",id:"advanced-topics",level:3}];function p(e){const n={a:"a",br:"br",code:"code",em:"em",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(r.C,{to:"examples/tutorials/basic/your_first_hydra_app/4_config_groups"}),"\n",(0,o.jsx)(n.p,{children:"Suppose you want to benchmark your application on each of PostgreSQL and MySQL. To do this, use config groups."}),"\n",(0,o.jsxs)(n.p,{children:["A ",(0,o.jsx)(n.em,{children:(0,o.jsx)(n.strong,{children:"Config Group"})})," is a named group with a set of valid options.\nSelecting a non-existent config option generates an error message with the valid options."]}),"\n",(0,o.jsx)(n.h3,{id:"creating-config-groups",children:"Creating config groups"}),"\n",(0,o.jsxs)(n.p,{children:["To create a config group, create a directory, e.g. ",(0,o.jsx)(n.code,{children:"db"}),", to hold a file for each database configuration option.\nSince we are expecting to have multiple config groups, we will proactively move all the configuration files\ninto a ",(0,o.jsx)(n.code,{children:"conf"})," directory."]}),"\n",(0,o.jsxs)("div",{className:"row",children:[(0,o.jsx)("div",{className:"col col--4",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-text",metastring:'title="Directory layout"',children:"\u251c\u2500 conf\n\u2502  \u2514\u2500 db\n\u2502      \u251c\u2500 mysql.yaml\n\u2502      \u2514\u2500 postgresql.yaml\n\u2514\u2500\u2500 my_app.py\n"})})}),(0,o.jsx)("div",{className:"col col--4",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",metastring:'title="db/mysql.yaml"',children:"driver: mysql\nuser: omry\npassword: secret\n\n\n"})})}),(0,o.jsx)("div",{className:"col col--4",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",metastring:'title="db/postgresql.yaml"',children:"driver: postgresql\nuser: postgres_user\npassword: drowssap\ntimeout: 10\n\n"})})})]}),"\n",(0,o.jsx)(n.h3,{id:"using-config-groups",children:"Using config groups"}),"\n",(0,o.jsxs)(n.p,{children:["Since we moved all the configs into the ",(0,o.jsx)(n.code,{children:"conf"})," directory, we need to tell Hydra where to find them using the ",(0,o.jsx)(n.code,{children:"config_path"})," parameter.\n",(0,o.jsxs)(n.strong,{children:[(0,o.jsx)(n.code,{children:"config_path"})," is a directory relative to ",(0,o.jsx)(n.code,{children:"my_app.py"})]}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",metastring:'title="my_app.py" {4}',children:'from omegaconf import DictConfig, OmegaConf\nimport hydra\n\n@hydra.main(version_base=None, config_path="conf")\ndef my_app(cfg: DictConfig) -> None:\n    print(OmegaConf.to_yaml(cfg))\n\nif __name__ == "__main__":\n    my_app()\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Running ",(0,o.jsx)(n.code,{children:"my_app.py"})," without requesting a configuration will print an empty config."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"$ python my_app.py\n{}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Select an item from a config group with ",(0,o.jsx)(n.code,{children:"+GROUP=OPTION"}),", e.g:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",metastring:"{2}",children:"$ python my_app.py +db=postgresql\ndb:\n  driver: postgresql\n  pass: drowssap\n  timeout: 10\n  user: postgres_user\n"})}),"\n",(0,o.jsxs)(n.p,{children:["By default, the config group determines where the config content is placed inside the final config object.\nIn Hydra, the path to the config content is referred to as the config ",(0,o.jsx)(n.code,{children:"package"}),".\nThe package of ",(0,o.jsx)(n.code,{children:"db/postgresql.yaml"})," is ",(0,o.jsx)(n.code,{children:"db"}),":"]}),"\n",(0,o.jsx)(n.p,{children:"Like before, you can still override individual values in the resulting config:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"$ python my_app.py +db=postgresql db.timeout=20\ndb:\n  driver: postgresql\n  pass: drowssap\n  timeout: 20\n  user: postgres_user\n"})}),"\n",(0,o.jsx)(n.h3,{id:"advanced-topics",children:"Advanced topics"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Config content can be relocated via package overrides. See ",(0,o.jsx)(n.a,{href:"/docs/1.2/advanced/overriding_packages",children:"Reference Manual/Packages"}),"."]}),"\n",(0,o.jsxs)(n.li,{children:["Multiple options can be selected from the same Config Group by specifying them as a list.",(0,o.jsx)(n.br,{}),"\n","See ",(0,o.jsx)(n.a,{href:"/docs/1.2/patterns/select_multiple_configs_from_config_group",children:"Common Patterns/Selecting multiple configs from a Config Group"})]}),"\n"]})]})}function g(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(p,{...e})}):p(e)}}}]);
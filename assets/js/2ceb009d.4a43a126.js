"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8232],{28453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>a});var o=t(96540);const s={},r=o.createContext(s);function i(e){const n=o.useContext(r);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),o.createElement(r.Provider,{value:n},e.children)}},32519:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"tutorials/structured_config/config_store","title":"Config Store API","description":"ConfigStore is a singleton storing configs in memory.","source":"@site/versioned_docs/version-1.0/tutorials/structured_config/10_config_store.md","sourceDirName":"tutorials/structured_config","slug":"/tutorials/structured_config/config_store","permalink":"/docs/1.0/tutorials/structured_config/config_store","draft":false,"unlisted":false,"editUrl":"https://github.com/facebookresearch/hydra/edit/main/website/versioned_docs/version-1.0/tutorials/structured_config/10_config_store.md","tags":[],"version":"1.0","lastUpdatedBy":"jesszzzz","lastUpdatedAt":1755026473000,"sidebarPosition":10,"frontMatter":{"id":"config_store","title":"Config Store API"},"sidebar":"docs","previous":{"title":"Dynamic schema with many configs","permalink":"/docs/1.0/tutorials/structured_config/dynamic_schema"},"next":{"title":"Overview","permalink":"/docs/1.0/patterns/instantiate_objects/overview"}}');var s=t(74848),r=t(28453);const i={id:"config_store",title:"Config Store API"},a=void 0,c={},d=[{value:"API",id:"api",level:3},{value:"Example node values",id:"example-node-values",level:3}];function l(e){const n={code:"code",h3:"h3",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"ConfigStore"})," is a singleton storing configs in memory.\nThe primary API for interacting with the ",(0,s.jsx)(n.code,{children:"ConfigStore"})," is the store method described below."]}),"\n",(0,s.jsx)(n.h3,{id:"api",children:"API"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'class ConfigStore(metaclass=Singleton):\n    def store(\n        self,\n        name: str,\n        node: Any,\n        group: Optional[str] = None,\n        package: Optional[str] = "_group_",\n        provider: Optional[str] = None,\n    ) -> None:\n        """\n        Stores a config node into the repository\n        :param name: config name\n        :param node: config node, can be DictConfig, ListConfig,\n            Structured configs and even dict and list\n        :param group: config group, subgroup separator is \'/\',\n            for example hydra/launcher\n        :param package: Config node parent hierarchy.\n            Child separator is \'.\', for example foo.bar.baz\n        :param provider: the name of the module/app providing this config.\n            Helps debugging.\n        """\n    ...\n'})}),"\n",(0,s.jsx)(n.h3,{id:"example-node-values",children:"Example node values"}),"\n",(0,s.jsx)(n.p,{children:"A few examples of supported node values parameters:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'@dataclass\nclass MySQLConfig:\n    host: str = "localhost"\n    port: int = 3306\n\n# Using the type\ncs.store(name="config1", node=MySQLConfig)\n# Using an instance, overriding some default values\ncs.store(name="config2", node=MySQLConfig(host="test.db", port=3307))\n# Using a dictionary, forfeiting runtime type safety\ncs.store(name="config3", node={"host": "localhost", "port": 3308})\n'})})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}}}]);
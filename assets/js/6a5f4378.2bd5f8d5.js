"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6527],{28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>l});var a=t(96540);const i={},o=a.createContext(i);function s(e){const n=a.useContext(o);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),a.createElement(o.Provider,{value:n},e.children)}},49595:(e,n,t)=>{t.d(n,{A:()=>d,C:()=>c});t(96540);var a=t(28774),i=t(44586),o=t(48295),s=t(74848);function l(e){const n=(0,o.ir)();return(0,i.default)().siteConfig.customFields.githubLinkVersionToBaseUrl[n?.name??"current"]+e}function d(e){return(0,s.jsx)(a.default,{...e,to:l(e.to),target:"_blank"})}function c(e){const n=e.text??"Example (Click Here)";return(0,s.jsxs)(d,{...e,children:[(0,s.jsx)("span",{children:"\xa0"}),(0,s.jsx)("img",{src:"https://img.shields.io/badge/-"+n+"-informational",alt:"Example (Click Here)"})]})}},82744:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>m,frontMatter:()=>l,metadata:()=>a,toc:()=>r});const a=JSON.parse('{"id":"patterns/specializing_config","title":"Specializing configuration","description":"In some cases the desired configuration should depend on other configuration choices.","source":"@site/docs/patterns/specializing_config.md","sourceDirName":"patterns","slug":"/patterns/specializing_config","permalink":"/docs/patterns/specializing_config","draft":false,"unlisted":false,"editUrl":"https://github.com/facebookresearch/hydra/edit/main/website/docs/patterns/specializing_config.md","tags":[],"version":"current","lastUpdatedBy":"jesszzzz","lastUpdatedAt":1754333694000,"frontMatter":{"id":"specializing_config","title":"Specializing configuration"},"sidebar":"docs","previous":{"title":"Selecting multiple configs from a Config Group","permalink":"/docs/patterns/select_multiple_configs_from_config_group"},"next":{"title":"Read-only config","permalink":"/docs/patterns/write_protect_config_node"}}');var i=t(74848),o=t(28453),s=t(49595);const l={id:"specializing_config",title:"Specializing configuration"},d=void 0,c={},r=[{value:"initial config.yaml",id:"initial-configyaml",level:3},{value:"modified config.yaml",id:"modified-configyaml",level:3},{value:"dataset_model",id:"dataset_model",level:4},{value:"${dataset}_${model}",id:"dataset_model-1",level:4},{value:"optional",id:"optional",level:4},{value:"dataset_model/cifar10_alexnet.yaml",id:"dataset_modelcifar10_alexnetyaml",level:3}];function h(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h3:"h3",h4:"h4",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.C,{text:"Example application",to:"examples/patterns/specializing_config"}),"\n",(0,i.jsx)(n.p,{children:"In some cases the desired configuration should depend on other configuration choices.\nFor example, You may want to use only 5 layers in your Alexnet model if the dataset of choice is cifar10, and the default 7 otherwise."}),"\n",(0,i.jsx)(n.p,{children:"We can start with a config that looks like this:"}),"\n",(0,i.jsx)(n.h3,{id:"initial-configyaml",children:"initial config.yaml"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"defaults:\n  - dataset: imagenet\n  - model: alexnet\n"})}),"\n",(0,i.jsx)(n.p,{children:"We want to specialize the config based on the choice of the selected dataset and model:\nFurthermore, we only want to do it for cifar10 and alexnet and not for 3 other combinations."}),"\n",(0,i.jsx)(n.p,{children:"OmegaConf supports value interpolation, we can construct a value that would - at runtime - be a function of other values.\nThe idea is that we can add another element to the defaults list that would load a file name that depends on those two values:"}),"\n",(0,i.jsx)(n.h3,{id:"modified-configyaml",children:"modified config.yaml"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"defaults:\n  - dataset: imagenet\n  - model: alexnet\n  - optional dataset_model: ${dataset}_${model}\n"})}),"\n",(0,i.jsx)(n.p,{children:"Let's break this down:"}),"\n",(0,i.jsx)(n.h4,{id:"dataset_model",children:"dataset_model"}),"\n",(0,i.jsxs)(n.p,{children:["The key ",(0,i.jsx)(n.code,{children:"dataset_model"})," is an arbitrary directory, it can be anything unique that makes sense, including nested directory like ",(0,i.jsx)(n.code,{children:"dataset/model"}),"."]}),"\n",(0,i.jsx)(n.h4,{id:"dataset_model-1",children:"${dataset}_${model}"}),"\n",(0,i.jsxs)(n.p,{children:["the value ",(0,i.jsx)(n.code,{children:"${dataset}_${model}"})," is using OmegaConf's ",(0,i.jsx)(n.a,{href:"https://omegaconf.readthedocs.io/en/latest/usage.html#variable-interpolation",children:"variable interpolation"})," syntax.\nAt runtime, that value would resolve to ",(0,i.jsx)(n.em,{children:"imagenet_alexnet"}),", or ",(0,i.jsx)(n.em,{children:"cifar_resnet"})," - depending on the values of defaults.dataset and defaults.model."]}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsx)(n.p,{children:"This is non-standard interpolation and there are some subtle differences and limitations."})}),"\n",(0,i.jsx)(n.h4,{id:"optional",children:"optional"}),"\n",(0,i.jsxs)(n.p,{children:["By default, Hydra fails with an error if a config specified in the defaults does not exist.\nIn this case we only want to specialize cifar10 + alexnet, not all 4 combinations.\nthe keyword ",(0,i.jsx)(n.code,{children:"optional"})," tells Hydra to just continue if it can't find this file."]}),"\n",(0,i.jsx)(n.p,{children:"When specializing config, you usually want to only specify what's different, and not the whole thing.\nWe want the model for alexnet, when trained on cifar - to have 5 layers."}),"\n",(0,i.jsx)(n.h3,{id:"dataset_modelcifar10_alexnetyaml",children:"dataset_model/cifar10_alexnet.yaml"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"# @package _global_\n\nmodel:\n  num_layers: 5\n"})}),"\n",(0,i.jsx)(n.p,{children:"Let's check. Running with the default uses imagenet, so we don't get the specialized version of:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"$ python example.py\ndataset:\n  name: imagenet\n  path: /datasets/imagenet\nmodel:\n  num_layers: 7\n  type: alexnet\n"})}),"\n",(0,i.jsx)(n.p,{children:"Running with cifar10 dataset, we do get 5 for num_layers:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"$ python example.py dataset=cifar10\ndataset:\n  name: cifar10\n  path: /datasets/cifar10\nmodel:\n  num_layers: 5\n  type: alexnet\n"})})]})}function m(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}}}]);
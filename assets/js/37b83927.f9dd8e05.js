"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6262],{28453:(e,t,n)=>{n.d(t,{R:()=>l,x:()=>s});var a=n(96540);const i={},o=a.createContext(i);function l(e){const t=a.useContext(o);return a.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),a.createElement(o.Provider,{value:t},e.children)}},61807:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>h,frontMatter:()=>l,metadata:()=>a,toc:()=>r});const a=JSON.parse('{"id":"patterns/specializing_config","title":"Specializing configuration","description":"In some cases the desired configuration should depend on other configuration choices.","source":"@site/versioned_docs/version-0.11/patterns/specializing_config.md","sourceDirName":"patterns","slug":"/patterns/specializing_config","permalink":"/docs/0.11/patterns/specializing_config","draft":false,"unlisted":false,"editUrl":"https://github.com/facebookresearch/hydra/edit/main/website/versioned_docs/version-0.11/patterns/specializing_config.md","tags":[],"version":"0.11","lastUpdatedBy":"zhenbang-2026","lastUpdatedAt":1756937906000,"frontMatter":{"id":"specializing_config","title":"Specializing configuration","sidebar_label":"Specializing configuration"},"sidebar":"docs","previous":{"title":"Creating objects","permalink":"/docs/0.11/patterns/objects"},"next":{"title":"Introduction","permalink":"/docs/0.11/configure_hydra/intro"}}');var i=n(74848),o=n(28453);const l={id:"specializing_config",title:"Specializing configuration",sidebar_label:"Specializing configuration"},s=void 0,d={},r=[{value:"initial config.yaml",id:"initial-configyaml",level:3},{value:"modified config.yaml",id:"modified-configyaml",level:3},{value:"dataset_model",id:"dataset_model",level:4},{value:"${defaults.0.dataset}_${defaults.1.model}",id:"defaults0dataset_defaults1model",level:4},{value:"optional: true",id:"optional-true",level:4},{value:"dataset_model/cifar10_alexnet.yaml",id:"dataset_modelcifar10_alexnetyaml",level:3}];function c(e){const t={a:"a",code:"code",em:"em",h3:"h3",h4:"h4",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.p,{children:"In some cases the desired configuration should depend on other configuration choices.\nFor example, You may want to use only 5 layers in your Alexnet model if the dataset of choice is cifar10, and the default 7 otherwise."}),"\n",(0,i.jsx)(t.p,{children:"We can start with a config that looks like this:"}),"\n",(0,i.jsx)(t.h3,{id:"initial-configyaml",children:"initial config.yaml"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-yaml",children:"defaults:\n  - dataset: imagenet\n  - model: alexnet\n"})}),"\n",(0,i.jsx)(t.p,{children:"We want to specialize the config based on the choice of the selected dataset and model:\nFurthermore, we only want to do it for cifar10 and alexnet and not for 3 other combinations."}),"\n",(0,i.jsx)(t.p,{children:"OmegaConf supports value interpolation, we can construct a value that would - at runtime - be a function of other values.\nThe idea is that we can add another element to the defaults list that would load a file name that depends on those two values:"}),"\n",(0,i.jsx)(t.h3,{id:"modified-configyaml",children:"modified config.yaml"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-yaml",children:"defaults:\n  - dataset: imagenet\n  - model: alexnet\n  - dataset_model: ${defaults.0.dataset}_${defaults.1.model}\n    optional: true\n"})}),"\n",(0,i.jsx)(t.p,{children:"Let's break this down:"}),"\n",(0,i.jsx)(t.h4,{id:"dataset_model",children:"dataset_model"}),"\n",(0,i.jsxs)(t.p,{children:["The key ",(0,i.jsx)(t.code,{children:"dataset_model"})," is an arbitrary directory, it can be anything unique that makes sense, including nested directory like ",(0,i.jsx)(t.code,{children:"dataset/model"}),"."]}),"\n",(0,i.jsx)(t.h4,{id:"defaults0dataset_defaults1model",children:"${defaults.0.dataset}_${defaults.1.model}"}),"\n",(0,i.jsxs)(t.p,{children:["the value ",(0,i.jsx)(t.code,{children:"${defaults.0.dataset}_${defaults.1.model}"})," is using OmegaConf's ",(0,i.jsx)(t.a,{href:"https://omegaconf.readthedocs.io/en/latest/usage.html#variable-interpolation",children:"variable interpolation"}),".\nAt runtime, that value would resolve to ",(0,i.jsx)(t.em,{children:"imagenet_alexnet"}),", or ",(0,i.jsx)(t.em,{children:"cifar_resnet"})," - depending on the values of defaults.dataset and defaults.model.\nThis a bit clunky because defaults contains a list (I hope to improve this in the future)"]}),"\n",(0,i.jsx)(t.h4,{id:"optional-true",children:"optional: true"}),"\n",(0,i.jsx)(t.p,{children:"By default, Hydra would fail with an error if a config specified in the defaults does not exist.\nin this case we only want to specialize cifar10 + alexnet, not all 4 combinations.\nindication optional: true here tells Hydra to just continue if it can't find this file."}),"\n",(0,i.jsx)(t.p,{children:"When specializing config, you usually want to only specify what's different, and not the whole thing.\nWe want the model for alexnet, when trained on cifar - to have 5 layers."}),"\n",(0,i.jsx)(t.h3,{id:"dataset_modelcifar10_alexnetyaml",children:"dataset_model/cifar10_alexnet.yaml"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-yaml",children:"model:\n  num_layers: 5\n"})}),"\n",(0,i.jsx)(t.p,{children:"Let's check. Running with the default uses imagenet, so we don't get the specialized version of:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-yaml",children:"$ python example.py\ndataset:\n  name: imagenet\n  path: /datasets/imagenet\nmodel:\n  num_layers: 7\n  type: alexnet\n"})}),"\n",(0,i.jsx)(t.p,{children:"Running with cifar10 dataset, we do get 5 for num_layers:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-yaml",children:"$ python example.py dataset=cifar10\ndataset:\n  name: cifar10\n  path: /datasets/cifar10\nmodel:\n  num_layers: 5\n  type: alexnet\n"})})]})}function h(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}}}]);
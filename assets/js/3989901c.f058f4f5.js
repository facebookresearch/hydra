"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3065],{28453:(e,r,n)=>{n.d(r,{R:()=>a,x:()=>s});var i=n(96540);const o={},t=i.createContext(o);function a(e){const r=i.useContext(t);return i.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function s(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),i.createElement(t.Provider,{value:r},e.children)}},49595:(e,r,n)=>{n.d(r,{A:()=>d,C:()=>c});n(96540);var i=n(28774),o=n(44586),t=n(48295),a=n(74848);function s(e){const r=(0,t.ir)();return(0,o.default)().siteConfig.customFields.githubLinkVersionToBaseUrl[r?.name??"current"]+e}function d(e){return(0,a.jsx)(i.default,{...e,to:s(e.to),target:"_blank"})}function c(e){const r=e.text??"Example (Click Here)";return(0,a.jsxs)(d,{...e,children:[(0,a.jsx)("span",{children:"\xa0"}),(0,a.jsx)("img",{src:"https://img.shields.io/badge/-"+r+"-informational",alt:"Example (Click Here)"})]})}},67927:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>c,contentTitle:()=>d,default:()=>p,frontMatter:()=>s,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"tutorials/basic/running_your_app/working_directory","title":"Output/Working directory","description":"Hydra solves the problem of your needing to specify a new output directory for each run, by","source":"@site/versioned_docs/version-1.1/tutorials/basic/running_your_app/3_working_directory.md","sourceDirName":"tutorials/basic/running_your_app","slug":"/tutorials/basic/running_your_app/working_directory","permalink":"/docs/1.1/tutorials/basic/running_your_app/working_directory","draft":false,"unlisted":false,"editUrl":"https://github.com/facebookresearch/hydra/edit/main/website/versioned_docs/version-1.1/tutorials/basic/running_your_app/3_working_directory.md","tags":[],"version":"1.1","lastUpdatedBy":"Ryan Soklaski","lastUpdatedAt":1761571287000,"sidebarPosition":3,"frontMatter":{"id":"working_directory","title":"Output/Working directory","sidebar_label":"Output/Working directory"},"sidebar":"docs","previous":{"title":"Multi-run","permalink":"/docs/1.1/tutorials/basic/running_your_app/multi-run"},"next":{"title":"Logging","permalink":"/docs/1.1/tutorials/basic/running_your_app/logging"}}');var o=n(74848),t=n(28453),a=n(49595);const s={id:"working_directory",title:"Output/Working directory",sidebar_label:"Output/Working directory"},d=void 0,c={},l=[{value:"Changing or disabling the output subdir",id:"changing-or-disabling-the-output-subdir",level:3},{value:"Original working directory",id:"original-working-directory",level:3}];function u(e){const r={a:"a",code:"code",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(a.C,{to:"examples/tutorials/basic/running_your_hydra_app/3_working_directory"}),"\n",(0,o.jsx)(r.p,{children:"Hydra solves the problem of your needing to specify a new output directory for each run, by\ncreating a directory for each run and executing your code within that working directory."}),"\n",(0,o.jsx)(r.p,{children:"The working directory is used to:"}),"\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsx)(r.li,{children:"Store the output for the application (For example, a database dump file)"}),"\n",(0,o.jsx)(r.li,{children:"Store the Hydra output for the run (Configuration, Logs etc)"}),"\n"]}),"\n",(0,o.jsx)(r.p,{children:"Every time you run the app, a new working directory is created:"}),"\n",(0,o.jsxs)(r.p,{children:["Python file: ",(0,o.jsx)(r.code,{children:"my_app.py"})]}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-python",children:'import os\nimport hydra\nfrom omegaconf import DictConfig\n\n@hydra.main()\ndef my_app(cfg: DictConfig) -> None:\n    print("Working directory : {}".format(os.getcwd()))\n\n$ python my_app.py\nWorking directory : /home/omry/dev/hydra/outputs/2019-09-25/15-16-17\n\n$ python my_app.py\nWorking directory : /home/omry/dev/hydra/outputs/2019-09-25/15-16-19\n'})}),"\n",(0,o.jsx)(r.p,{children:"Let's take a look at one of the working directories:"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-text",children:"$ tree outputs/2019-09-25/15-16-17\noutputs/2019-09-25/15-16-17\n\u251c\u2500\u2500 .hydra\n\u2502   \u251c\u2500\u2500 config.yaml\n\u2502   \u251c\u2500\u2500 hydra.yaml\n\u2502   \u2514\u2500\u2500 overrides.yaml\n\u2514\u2500\u2500 my_app.log\n"})}),"\n",(0,o.jsxs)(r.p,{children:["We have the Hydra output directory (",(0,o.jsx)(r.code,{children:".hydra"})," by default), and the application log file.\nInside the Hydra output directory we have:"]}),"\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.code,{children:"config.yaml"}),": A dump of the user specified configuration"]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.code,{children:"hydra.yaml"}),": A dump of the Hydra configuration"]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.code,{children:"overrides.yaml"}),": The command line overrides used"]}),"\n"]}),"\n",(0,o.jsx)(r.p,{children:"And in the main output directory:"}),"\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.code,{children:"my_app.log"}),": A log file created for this run"]}),"\n"]}),"\n",(0,o.jsx)(r.h3,{id:"changing-or-disabling-the-output-subdir",children:"Changing or disabling the output subdir"}),"\n",(0,o.jsxs)(r.p,{children:["You can change the ",(0,o.jsx)(r.code,{children:".hydra"})," subdirectory name by overriding ",(0,o.jsx)(r.code,{children:"hydra.output_subdir"}),".\nYou can disable its creation by overriding ",(0,o.jsx)(r.code,{children:"hydra.output_subdir"})," to ",(0,o.jsx)(r.code,{children:"null"}),"."]}),"\n",(0,o.jsx)(r.h3,{id:"original-working-directory",children:"Original working directory"}),"\n",(0,o.jsxs)(r.p,{children:["You can still access the original working directory via ",(0,o.jsx)(r.code,{children:"get_original_cwd()"})," and ",(0,o.jsx)(r.code,{children:"to_absolute_path()"})," in ",(0,o.jsx)(r.code,{children:"hydra.utils"}),":"]}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-python",children:'from hydra.utils import get_original_cwd, to_absolute_path\n\n@hydra.main()\ndef my_app(_cfg: DictConfig) -> None:\n    print(f"Current working directory : {os.getcwd()}")\n    print(f"Orig working directory    : {get_original_cwd()}")\n    print(f"to_absolute_path(\'foo\')   : {to_absolute_path(\'foo\')}")\n    print(f"to_absolute_path(\'/foo\')  : {to_absolute_path(\'/foo\')}")\n\nif __name__ == "__main__":\n    my_app()\n'})}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-text",metastring:'title="$ python examples/tutorial/8_working_directory/original_cwd.py"',children:"Current working directory  : /Users/omry/dev/hydra/outputs/2019-10-23/10-53-03\nOriginal working directory : /Users/omry/dev/hydra\nto_absolute_path('foo')    : /Users/omry/dev/hydra/foo\nto_absolute_path('/foo')   : /foo\n"})}),"\n",(0,o.jsxs)(r.p,{children:["The name of the generated working directories can be ",(0,o.jsx)(r.a,{href:"/docs/1.1/configure_hydra/workdir",children:"customized"}),"."]})]})}function p(e={}){const{wrapper:r}={...(0,t.R)(),...e.components};return r?(0,o.jsx)(r,{...e,children:(0,o.jsx)(u,{...e})}):u(e)}}}]);
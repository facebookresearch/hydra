"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8183],{28453:(e,n,a)=>{a.d(n,{R:()=>s,x:()=>o});var i=a(96540);const r={},t=i.createContext(r);function s(e){const n=i.useContext(t);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),i.createElement(t.Provider,{value:n},e.children)}},31733:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"plugins/ax_sweeper","title":"Ax Sweeper plugin","description":"PyPI","source":"@site/versioned_docs/version-1.2/plugins/ax_sweeper.md","sourceDirName":"plugins","slug":"/plugins/ax_sweeper","permalink":"/docs/1.2/plugins/ax_sweeper","draft":false,"unlisted":false,"editUrl":"https://github.com/facebookresearch/hydra/edit/main/website/versioned_docs/version-1.2/plugins/ax_sweeper.md","tags":[],"version":"1.2","lastUpdatedBy":"Ryan Soklaski","lastUpdatedAt":1761571287000,"frontMatter":{"id":"ax_sweeper","title":"Ax Sweeper plugin","sidebar_label":"Ax Sweeper plugin"},"sidebar":"docs","previous":{"title":"Submitit Launcher plugin","permalink":"/docs/1.2/plugins/submitit_launcher"},"next":{"title":"Nevergrad Sweeper plugin","permalink":"/docs/1.2/plugins/nevergrad_sweeper"}}');var r=a(74848),t=a(28453),s=a(49595);const o={id:"ax_sweeper",title:"Ax Sweeper plugin",sidebar_label:"Ax Sweeper plugin"},l=void 0,c={},d=[{value:"Installation",id:"installation",level:3},{value:"Usage",id:"usage",level:3}];function h(e){const n={a:"a",code:"code",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components},{GithubLink:a}=n;return a||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("GithubLink",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://img.shields.io/pypi/v/hydra-ax-sweeper",children:(0,r.jsx)(n.img,{src:"https://img.shields.io/pypi/v/hydra-ax-sweeper",alt:"PyPI"})}),"\n",(0,r.jsx)(n.img,{src:"https://img.shields.io/pypi/l/hydra-ax-sweeper",alt:"PyPI - License"}),"\n",(0,r.jsx)(n.img,{src:"https://img.shields.io/pypi/pyversions/hydra-ax-sweeper",alt:"PyPI - Python Version"}),"\n",(0,r.jsx)(n.a,{href:"https://pypistats.org/packages/hydra-ax-sweeper",children:(0,r.jsx)(n.img,{src:"https://img.shields.io/pypi/dm/hydra-ax-sweeper.svg",alt:"PyPI - Downloads"})}),(0,r.jsx)(s.C,{text:"Example application",to:"plugins/hydra_ax_sweeper/example"}),(0,r.jsx)(s.C,{text:"Plugin source",to:"plugins/hydra_ax_sweeper"})]}),"\n",(0,r.jsxs)(n.p,{children:["This plugin provides a mechanism for Hydra applications to use the ",(0,r.jsx)(n.a,{href:"https://ax.dev/",children:"Adaptive Experimentation Platform, aka Ax"}),". Ax can optimize any experiment - machine learning experiments, A/B tests, and simulations."]}),"\n",(0,r.jsx)(n.h3,{id:"installation",children:"Installation"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-commandline",children:"pip install hydra-ax-sweeper --upgrade\n"})}),"\n",(0,r.jsx)(n.h3,{id:"usage",children:"Usage"}),"\n",(0,r.jsxs)(n.p,{children:["Once installed, add ",(0,r.jsx)(n.code,{children:"hydra/sweeper=ax"})," to your command line. Alternatively, override ",(0,r.jsx)(n.code,{children:"hydra/sweeper"})," in your config:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"defaults:\n  - override hydra/sweeper: ax\n"})}),"\n",(0,r.jsxs)(n.p,{children:["We include an example of how to use this plugin. The file ",(0,r.jsx)(a,{to:"plugins/hydra_ax_sweeper/example/banana.py",children:"example/banana.py"}),"\nimplements the ",(0,r.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Rosenbrock_function",children:"Rosenbrock function (aka Banana function)"}),".\nThe return value of the function should be the value that we want to optimize."]}),"\n",(0,r.jsxs)(n.p,{children:["To compute the best parameters for the Banana function, clone the code and run the following command in the ",(0,r.jsx)(n.code,{children:"plugins/hydra_ax_sweeper"})," directory:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"python example/banana.py -m 'banana.x=int(interval(-5, 5))' 'banana.y=interval(-5, 10.1)'\n"})}),"\n",(0,r.jsx)(n.p,{children:"The output of a run looks like:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"[HYDRA] AxSweeper is optimizing the following parameters:\nbanana.x: range=[-5, 5]\nbanana.y: range=[-5.0, 10.1]\nax.modelbridge.dispatch_utils: Using Bayesian Optimization generation strategy: GenerationStrategy(name='Sobol+GPEI', steps=[Sobol for 5 trials, GPEI for subsequent trials]). Iterations after 5 will take longer to generate due to model-fitting.\n[HYDRA] AxSweeper is launching 5 jobs\n[HYDRA] Launching 5 jobs locally\n[HYDRA]        #0 : banana.x=2 banana.y=-0.988\n[__main__][INFO] - Banana_Function(x=2, y=-0.988)=2488.883\n[HYDRA]        #1 : banana.x=-1 banana.y=7.701\n[__main__][INFO] - Banana_Function(x=-1, y=7.701)=4493.987\n[HYDRA]        #2 : banana.x=-1 banana.y=-3.901\n[__main__][INFO] - Banana_Function(x=-1, y=-3.901)=2406.259\n[HYDRA]        #3 : banana.x=-1 banana.y=0.209\n[__main__][INFO] - Banana_Function(x=-1, y=0.209)=66.639\n[HYDRA]        #4 : banana.x=4 banana.y=-4.557\n[__main__][INFO] - Banana_Function(x=4, y=-4.557)=42270.006\n[HYDRA] New best value: 66.639, best parameters: {'banana.x': -1, 'banana.y': 0.209}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["In this example, we set the range of ",(0,r.jsx)(n.code,{children:"x"})," parameter as an integer in the interval ",(0,r.jsx)(n.code,{children:"[-5, 5]"})," and the range of ",(0,r.jsx)(n.code,{children:"y"})," parameter as a float in the interval ",(0,r.jsx)(n.code,{children:"[-5, 10.1]"}),". Note that in the case of ",(0,r.jsx)(n.code,{children:"x"}),", we used ",(0,r.jsx)(n.code,{children:"int(interval(...))"})," and hence only integers are sampled. In the case of ",(0,r.jsx)(n.code,{children:"y"}),", we used ",(0,r.jsx)(n.code,{children:"interval(...)"})," which refers to a floating-point interval. Other supported formats are fixed parameters (e.g.",(0,r.jsx)(n.code,{children:" banana.x=5.0"}),"), choice parameters (eg ",(0,r.jsx)(n.code,{children:"banana.x=choice(1,2,3)"}),") and range (eg ",(0,r.jsx)(n.code,{children:"banana.x=range(1, 10)"}),"). Note that ",(0,r.jsx)(n.code,{children:"interval"}),", ",(0,r.jsx)(n.code,{children:"choice"})," etc. are functions provided by Hydra, and you can read more about them ",(0,r.jsx)(n.a,{href:"/docs/1.2/advanced/override_grammar/extended",children:"here"}),". An important thing to remember is, use ",(0,r.jsx)(n.a,{href:"/docs/1.2/advanced/override_grammar/extended#interval-sweep",children:(0,r.jsx)(n.code,{children:"interval"})})," when we want Ax to sample values from an interval. ",(0,r.jsx)(n.a,{href:"https://ax.dev/api/ax.html#ax.RangeParameter",children:(0,r.jsx)(n.code,{children:"RangeParameter"})})," in Ax is equivalent to ",(0,r.jsx)(n.code,{children:"interval"})," in Hydra. Remember to use ",(0,r.jsx)(n.code,{children:"int(interval(...))"})," if you want to sample only integer points from the interval. ",(0,r.jsx)(n.a,{href:"/docs/1.2/advanced/override_grammar/extended#range-sweep",children:(0,r.jsx)(n.code,{children:"range"})})," can be used as an alternate way of specifying choice parameters. For example ",(0,r.jsx)(n.code,{children:"python example/banana.py -m banana.x=choice(1, 2, 3, 4)"})," is equivalent to ",(0,r.jsx)(n.code,{children:"python example/banana.py -m banana.x=range(1, 5)"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["The values of the ",(0,r.jsx)(n.code,{children:"x"})," and ",(0,r.jsx)(n.code,{children:"y"})," parameters can also be set using the config file ",(0,r.jsx)(n.code,{children:"plugins/hydra_ax_sweeper/example/conf/config.yaml"}),". For instance, the configuration corresponding to the commandline arguments is as follows:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"banana.x:\n type: range\n bounds: [-5, 5]\n\nbanana.y:\n type: range\n bounds: [-5, 10.1]\n"})}),"\n",(0,r.jsxs)(n.p,{children:["To sample in log space, you can tag the commandline override with ",(0,r.jsx)(n.code,{children:"log"}),". E.g. ",(0,r.jsx)(n.code,{children:"python example/banana.py -m banana.x=tag(log, interval(1, 1000))"}),". You can set ",(0,r.jsx)(n.code,{children:"log_scale: true"})," in the input config to achieve the same."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"banana.z:\n type: range\n bounds: [1, 100]\n log_scale: true\n"})}),"\n",(0,r.jsxs)(n.p,{children:["In general, the plugin supports setting all the Ax supported ",(0,r.jsx)(n.a,{href:"https://ax.dev/api/core.html?highlight=range#module-ax.core.parameter",children:"Parameters"})," in the config. According to the ",(0,r.jsx)(n.a,{href:"https://ax.dev/api/service.html#ax.service.ax_client.AxClient.create_experiment",children:"Ax documentation"}),", the required elements in the config are:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"name"})," - Name of the parameter. It is of type string."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"type"})," - Type of the parameter. It can take the following values: ",(0,r.jsx)(n.code,{children:"range"}),", ",(0,r.jsx)(n.code,{children:"fixed"}),", or ",(0,r.jsx)(n.code,{children:"choice"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"bounds"})," - Required only for the ",(0,r.jsx)(n.code,{children:"range"})," parameters. It should be a list of two values, with the lower bound first."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"values"})," - Required only for the ",(0,r.jsx)(n.code,{children:"choice"})," parameters. It should be a list of values."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"value"})," - Required only for the ",(0,r.jsx)(n.code,{children:"fixed"})," parameters. It should be a single value."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Note that if you want to sample integers in the range ",(0,r.jsx)(n.code,{children:"-5"})," to ",(0,r.jsx)(n.code,{children:"5"}),", you need to specify the range as ",(0,r.jsx)(n.code,{children:"int(interval(-5, 5))"})," (in the command line) or ",(0,r.jsx)(n.code,{children:"[-5, 5]"})," (in config). If you want to sample floats in range ",(0,r.jsx)(n.code,{children:"-5"})," to ",(0,r.jsx)(n.code,{children:"5"}),", you need to specify the range as ",(0,r.jsx)(n.code,{children:"interval(-5, 5)"})," (in the command line) or ",(0,r.jsx)(n.code,{children:"[-5.0, 5.0]"})," (in config)."]}),"\n",(0,r.jsxs)(n.p,{children:["The Ax Sweeper assumes the optimized function is a noisy function with unknown measurement uncertainty.\nThis can be changed by overriding the ",(0,r.jsx)(n.code,{children:"is_noisy"})," parameter to False, which specifies that each measurement is exact, i.e., each measurement has a measurement uncertainty of zero."]}),"\n",(0,r.jsxs)(n.p,{children:["If measurement uncertainty is known or can be estimated (e.g., via a heuristic or via the ",(0,r.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Standard_error",children:"standard error of the mean"})," of repeated measurements), the measurement function can return the tuple ",(0,r.jsx)(n.code,{children:"(measurement_value, measurement_uncertainty)"})," instead of a scalar value."]}),"\n",(0,r.jsx)(n.p,{children:"The parameters for the optimization process can also be set in the config file. Specifying the Ax config is optional. You can discover the Ax Sweeper parameters with:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",metastring:'title="$ python your_app.py hydra/sweeper=ax --cfg hydra -p hydra.sweeper"',children:"# @package hydra.sweeper\n_target_: hydra_plugins.hydra_ax_sweeper.ax_sweeper.AxSweeper\nmax_batch_size: null\nax_config:\n  max_trials: 10\n  early_stop:\n    minimize: true\n    max_epochs_without_improvement: 10\n    epsilon: 1.0e-05\n  experiment:\n    name: null\n    objective_name: objective\n    minimize: true\n    parameter_constraints: null\n    outcome_constraints: null\n    status_quo: null\n  client:\n    verbose_logging: false\n    random_seed: null\n  is_noisy: true\n  params: {}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["There are several standard approaches for configuring plugins. Check ",(0,r.jsx)(n.a,{href:"/docs/1.2/patterns/configuring_plugins",children:"this page"})," for more information."]})]})}function p(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},49595:(e,n,a)=>{a.d(n,{A:()=>l,C:()=>c});a(96540);var i=a(28774),r=a(44586),t=a(48295),s=a(74848);function o(e){const n=(0,t.ir)();return(0,r.default)().siteConfig.customFields.githubLinkVersionToBaseUrl[n?.name??"current"]+e}function l(e){return(0,s.jsx)(i.default,{...e,to:o(e.to),target:"_blank"})}function c(e){const n=e.text??"Example (Click Here)";return(0,s.jsxs)(l,{...e,children:[(0,s.jsx)("span",{children:"\xa0"}),(0,s.jsx)("img",{src:"https://img.shields.io/badge/-"+n+"-informational",alt:"Example (Click Here)"})]})}}}]);
"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7441],{28453:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>r});var t=i(96540);const o={},a=t.createContext(o);function s(e){const n=t.useContext(a);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),t.createElement(a.Provider,{value:n},e.children)}},49595:(e,n,i)=>{i.d(n,{A:()=>c,C:()=>l});i(96540);var t=i(28774),o=i(44586),a=i(48295),s=i(74848);function r(e){const n=(0,a.ir)();return(0,o.default)().siteConfig.customFields.githubLinkVersionToBaseUrl[n?.name??"current"]+e}function c(e){return(0,s.jsx)(t.default,{...e,to:r(e.to),target:"_blank"})}function l(e){const n=e.text??"Example (Click Here)";return(0,s.jsxs)(c,{...e,children:[(0,s.jsx)("span",{children:"\xa0"}),(0,s.jsx)("img",{src:"https://img.shields.io/badge/-"+n+"-informational",alt:"Example (Click Here)"})]})}},74552:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>f,frontMatter:()=>r,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"tutorials/basic/your_first_app/config_file","title":"Specifying a config file","description":"It can get tedious to type all those command line arguments.","source":"@site/versioned_docs/version-1.1/tutorials/basic/your_first_app/2_config_file.md","sourceDirName":"tutorials/basic/your_first_app","slug":"/tutorials/basic/your_first_app/config_file","permalink":"/docs/1.1/tutorials/basic/your_first_app/config_file","draft":false,"unlisted":false,"editUrl":"https://github.com/facebookresearch/hydra/edit/main/website/versioned_docs/version-1.1/tutorials/basic/your_first_app/2_config_file.md","tags":[],"version":"1.1","lastUpdatedBy":"zhenbang-2026","lastUpdatedAt":1757109332000,"sidebarPosition":2,"frontMatter":{"id":"config_file","title":"Specifying a config file"},"sidebar":"docs","previous":{"title":"A simple command-line application","permalink":"/docs/1.1/tutorials/basic/your_first_app/simple_cli"},"next":{"title":"Using the config object","permalink":"/docs/1.1/tutorials/basic/your_first_app/using_config"}}');var o=i(74848),a=i(28453),s=i(49595);const r={id:"config_file",title:"Specifying a config file"},c=void 0,l={},d=[];function p(e){const n={a:"a",br:"br",code:"code",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(s.C,{to:"examples/tutorials/basic/your_first_hydra_app/2_config_file"}),"\n",(0,o.jsx)(n.p,{children:"It can get tedious to type all those command line arguments.\nYou can solve it by creating a configuration file next to my_app.py.\nHydra configuration files are yaml files and should have the .yaml file extension."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",metastring:'title="config.yaml"',children:"db: \n  driver: mysql\n  user: omry\n  password: secret\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Specify the config name by passing a ",(0,o.jsx)(n.code,{children:"config_name"})," parameter to the ",(0,o.jsx)(n.strong,{children:"@hydra.main()"})," decorator.\nNote that you should omit the ",(0,o.jsx)(n.strong,{children:".yaml"})," extension.\nHydra also needs to know where to find your config. Specify the directory containing it relative to the application by passing ",(0,o.jsx)(n.code,{children:"config_path"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",metastring:'title="my_app.py" {4}',children:'from omegaconf import DictConfig, OmegaConf\nimport hydra\n\n@hydra.main(config_path=".", config_name="config")\ndef my_app(cfg):\n    print(OmegaConf.to_yaml(cfg))\n\nif __name__ == "__main__":\n    my_app()\n'})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"config.yaml"})," is loaded automatically when you run your application."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"$ python my_app.py\ndb:\n  driver: mysql\n  user: omry\n  password: secret\n"})}),"\n",(0,o.jsxs)(n.p,{children:["You can override values in the loaded config from the command line.",(0,o.jsx)(n.br,{}),"\n","Note the lack of the ",(0,o.jsx)(n.code,{children:"+"})," prefix."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",metastring:"{4-5}",children:"$ python my_app.py db.user=root db.password=1234\ndb:\n  driver: mysql\n  user: root\n  password: 1234\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Use ",(0,o.jsx)(n.code,{children:"++"})," to override a config value if it's already in the config, or add it otherwise.\ne.g:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",children:"# Override an existing item\n$ python my_app.py ++db.password=1234\n\n# Add a new item\n$ python my_app.py ++db.timeout=5\n"})}),"\n",(0,o.jsxs)(n.p,{children:["You can enable ",(0,o.jsx)(n.a,{href:"/docs/1.1/tutorials/basic/running_your_app/tab_completion",children:"tab completion"})," for your Hydra applications."]})]})}function f(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(p,{...e})}):p(e)}}}]);
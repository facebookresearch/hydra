"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4012],{28453:(e,n,a)=>{a.d(n,{R:()=>i,x:()=>t});var l=a(96540);const c={},o=l.createContext(c);function i(e){const n=l.useContext(o);return l.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:i(e.components),l.createElement(o.Provider,{value:n},e.children)}},3e4:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>s,contentTitle:()=>r,default:()=>p,frontMatter:()=>t,metadata:()=>l,toc:()=>d});const l=JSON.parse('{"id":"experimental/callbacks","title":"Callbacks","description":"The Callback interface enables custom","source":"@site/versioned_docs/version-1.1/experimental/callbacks.md","sourceDirName":"experimental","slug":"/experimental/callbacks","permalink":"/docs/1.1/experimental/callbacks","draft":false,"unlisted":false,"editUrl":"https://github.com/facebookresearch/hydra/edit/main/website/versioned_docs/version-1.1/experimental/callbacks.md","tags":[],"version":"1.1","lastUpdatedBy":"zhenbang-2026","lastUpdatedAt":1756937906000,"frontMatter":{"id":"callbacks","title":"Callbacks","sidebar_label":"Callbacks"},"sidebar":"docs","previous":{"title":"Introduction","permalink":"/docs/1.1/experimental/intro"},"next":{"title":"Developer Guide Overview","permalink":"/docs/1.1/development/overview"}}');var c=a(74848),o=a(28453),i=a(49595);const t={id:"callbacks",title:"Callbacks",sidebar_label:"Callbacks"},r=void 0,s={},d=[{value:"Configure Callback",id:"configure-callback",level:3},{value:"Callback ordering",id:"callback-ordering",level:3}];function h(e){const n={a:"a",code:"code",h3:"h3",p:"p",pre:"pre",...(0,o.R)(),...e.components},{Details:a}=n;return a||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,c.jsxs)(c.Fragment,{children:[(0,c.jsxs)(n.p,{children:["The ",(0,c.jsx)(i.A,{to:"hydra/experimental/callback.py",children:"Callback interface"})," enables custom\ncode to be triggered by various Hydra events."]}),"\n",(0,c.jsxs)(n.p,{children:["To use the callback API, one should import Hydra's ",(0,c.jsx)(n.code,{children:"Callback"})," class:"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-python",children:"from hydra.experimental.callback import Callback\n"})}),"\n",(0,c.jsxs)(n.p,{children:["Users can then create subclasses of this ",(0,c.jsx)(n.code,{children:"Callback"})," class, overriding one or more of\nthe methods defined by ",(0,c.jsx)(n.code,{children:"Callback"}),". For the methods of a subclass to be called at the\nappropriate time, the subclass must be registered with Hydra in the ",(0,c.jsx)(n.code,{children:"hydra.callbacks"})," config\n(see examples below)."]}),"\n",(0,c.jsxs)(n.p,{children:["The full API exposed by the ",(0,c.jsx)(n.code,{children:"hydra.experimental.callback.Callback"})," class is listed below:"]}),"\n",(0,c.jsxs)(a,{children:[(0,c.jsx)("summary",{children:"Events supported (Click to expand)"}),(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-python",children:'class Callback:\n    def on_run_start(self, config: DictConfig, **kwargs: Any) -> None:\n        """\n        Called in RUN mode before job/application code starts. `config` is composed with overrides.\n        Some `hydra.runtime` configs are not populated yet.\n        See hydra.core.utils.run_job for more info.\n        """\n        ...\n\n    def on_run_end(self, config: DictConfig, **kwargs: Any) -> None:\n        """\n        Called in RUN mode after job/application code returns.\n        """\n        ...\n\n    def on_multirun_start(self, config: DictConfig, **kwargs: Any) -> None:\n        """\n        Called in MULTIRUN mode before any job starts.\n        When using a launcher, this will be executed on local machine before any Sweeper/Launcher is initialized.\n        """\n        ...\n\n    def on_multirun_end(self, config: DictConfig, **kwargs: Any) -> None:\n        """\n        Called in MULTIRUN mode after all jobs returns.\n        When using a launcher, this will be executed on local machine.\n        """\n        ...\n\n    def on_job_start(self, config: DictConfig, **kwargs: Any) -> None:\n        """\n        Called in both RUN and MULTIRUN modes, once for each Hydra job (before running application code).\n        This is called from within `hydra.core.utils.run_job`. In the case of remote launching, this will be executed\n        on the remote server along with your application code.\n        """\n        ...\n\n    def on_job_end(\n        self, config: DictConfig, job_return: JobReturn, **kwargs: Any\n    ) -> None:\n        """\n        Called in both RUN and MULTIRUN modes, once for each Hydra job (after running\n        application code).\n        This is called from within `hydra.core.utils.run_job`. In the case of remote launching, this will be executed\n        on the remote server after your application code.\n\n        `job_return` contains info that could be useful for logging or post-processing.\n        See hydra.core.utils.JobReturn for more.\n        """\n        ...\n\n'})})]}),"\n",(0,c.jsx)(n.h3,{id:"configure-callback",children:"Configure Callback"}),"\n",(0,c.jsxs)(n.p,{children:["Say we have ",(0,c.jsx)(n.code,{children:"MyCallback"})," so after every job ends we can upload a certain file to a"," ",(0,c.jsx)(n.a,{href:"https://internalfb.com/sevmanager/view/3",children:"S3"})," ","bucket.\nFor simplicity we include this Callback class within the application, in real life you should have the\nCallback in a separate file.\nRunning the application, we can see our custom method ",(0,c.jsx)(n.code,{children:"on_job_end"})," was called."]}),"\n",(0,c.jsxs)("div",{className:"row",children:[(0,c.jsx)("div",{className:"col col--9",children:(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-python",metastring:'title="my_app.py"',children:'class MyCallback(Callback):\n   def __init__(self, bucket: str, file_path: str) -> None:\n        self.bucket = bucket\n        self.file_path = file_path\n\n   def on_job_end(self, config: DictConfig, **kwargs: Any) -> None:\n        print(f"Job ended,uploading...")\n        # uploading...\n\n@hydra.main(config_path="conf", config_name="config")\ndef my_app(cfg: DictConfig) -> None:\n    print(OmegaConf.to_yaml(cfg))\n\n\nif __name__ == "__main__":\n    my_app()\n'})})}),(0,c.jsx)("div",{className:"col col--3",children:(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-commandline",metastring:'title="output"',children:"\n$ python  my_app.py\nfoo: bar\n\nJob ended,uploading...\n\n\n\n\n\n\n\n\n\n\n\n"})})})]}),"\n",(0,c.jsx)(n.p,{children:"Now let's take a look at the configurations."}),"\n",(0,c.jsxs)("div",{className:"row",children:[(0,c.jsx)("div",{className:"col col--4",children:(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-commandline",metastring:'title="$ tree conf"',children:"conf\n\u251c\u2500\u2500 config.yaml\n\u2514\u2500\u2500 hydra\n    \u2514\u2500\u2500 callbacks\n        \u2514\u2500\u2500 my_callback.yaml\n\n\n"})})}),(0,c.jsx)("div",{className:"col  col--3",children:(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-commandline",metastring:'title="conf/config.yaml"',children:"defaults:\n - /hydra/callbacks:\n    - my_callback\n\nfoo: bar\n\n\n"})})}),(0,c.jsx)("div",{className:"col  col--5",children:(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-commandline",metastring:'title="conf/hydra/callbacks/my_callback.yaml"',children:"# @package _global_\nhydra:\n  callbacks:\n    my_callback:\n      _target_: my_app.MyCallback\n      bucket: my_s3_bucket\n      file_path: ./test.pt\n"})})})]}),"\n",(0,c.jsx)(n.h3,{id:"callback-ordering",children:"Callback ordering"}),"\n",(0,c.jsxs)(n.p,{children:["The ",(0,c.jsx)(n.code,{children:"on_run_start"})," or ",(0,c.jsx)(n.code,{children:"on_multirun_start"})," method will get called first,\nfollowed by ",(0,c.jsx)(n.code,{children:"on_job_start"})," (called once for each job).\nAfter each job ",(0,c.jsx)(n.code,{children:"on_job_end"})," is called, and finally either ",(0,c.jsx)(n.code,{children:"on_run_end"})," or\n",(0,c.jsx)(n.code,{children:"on_multirun_end"})," is called one time before the application exits."]}),"\n",(0,c.jsxs)(n.p,{children:["In the ",(0,c.jsx)(n.code,{children:"hydra.callbacks"})," section of your config, you can use a list to register multiple callbacks. They will be called in the final composed order for ",(0,c.jsx)(n.code,{children:"start"})," events and\nin reversed order for ",(0,c.jsx)(n.code,{children:"end"})," events. So, for example, suppose we have the following composed config:"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-commandline",metastring:'title="python my_app.py --cfg hydra -p hydra.callbacks"',children:"# @package hydra.callbacks\nmy_callback1:\n  _target_: my_app.MyCallback1\n  param1: val1\nmy_callback2:\n  _target_: my_app.MyCallback2\n  param2: val2\n"})}),"\n",(0,c.jsxs)(n.p,{children:["Before each job starts, ",(0,c.jsx)(n.code,{children:"MyCallback1.on_job_start"})," will get called first,\nfollowed by ",(0,c.jsx)(n.code,{children:"MyCallback2.on_job_start"}),".\nAfter each job ends, ",(0,c.jsx)(n.code,{children:"MyCallback2.on_job_end"})," will get called first,\nfollowed by ",(0,c.jsx)(n.code,{children:"MyCallback1.on_job_end"}),"."]})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,c.jsx)(n,{...e,children:(0,c.jsx)(h,{...e})}):h(e)}},49595:(e,n,a)=>{a.d(n,{A:()=>r,C:()=>s});a(96540);var l=a(28774),c=a(44586),o=a(48295),i=a(74848);function t(e){const n=(0,o.ir)();return(0,c.default)().siteConfig.customFields.githubLinkVersionToBaseUrl[n?.name??"current"]+e}function r(e){return(0,i.jsx)(l.default,{...e,to:t(e.to),target:"_blank"})}function s(e){const n=e.text??"Example (Click Here)";return(0,i.jsxs)(r,{...e,children:[(0,i.jsx)("span",{children:"\xa0"}),(0,i.jsx)("img",{src:"https://img.shields.io/badge/-"+n+"-informational",alt:"Example (Click Here)"})]})}}}]);